  public void testInjectableTypeListenerThrows() {
    final InjectableType.Listener clumsyListener = new InjectableType.Listener() {
      int failures = 0;

      public <I> void hear(InjectableType<I> injectableType, Encounter<I> encounter) {
        throw new ClassCastException("whoops, failure #" + (++failures));
      }

      @Override public String toString() {
        return "clumsy";
      }
    };

    try {
      Guice.createInjector(new AbstractModule() {
        protected void configure() {
          bindListener(any(), clumsyListener);
          bind(B.class);
          bind(C.class);
        }
      });
      fail();
    } catch (CreationException expected) {
      assertContains(expected.getMessage(),
          "1) Error notifying InjectableType.Listener clumsy (bound at " + getClass().getName(),
          ".configure(InjectableTypeListenerTest.java:",
          "of " + B.class.getName(), 
          "Reason: java.lang.ClassCastException: whoops, failure #1",
          "2) Error notifying InjectableType.Listener clumsy (bound at " + getClass().getName(),
          ".configure(InjectableTypeListenerTest.java:",
          "of " + C.class.getName(),
          "Reason: java.lang.ClassCastException: whoops, failure #2");
    }
    
    Injector injector = Guice.createInjector(new AbstractModule() {
      protected void configure() {
        bindListener(any(), clumsyListener);
      }
    });
    try {
      injector.getProvider(B.class);
      fail();
    } catch (ConfigurationException expected) {
      assertContains(expected.getMessage(),
          "1) Error notifying InjectableType.Listener clumsy (bound at " + getClass().getName(),
          ".configure(InjectableTypeListenerTest.java:",
          "of " + B.class.getName(),
          "Reason: java.lang.ClassCastException: whoops, failure #3");
    }

    // getting it again should yield the same exception #3
    try {
      injector.getInstance(B.class);
      fail();
    } catch (ConfigurationException expected) {
      assertContains(expected.getMessage(),
          "1) Error notifying InjectableType.Listener clumsy (bound at " + getClass().getName(),
          ".configure(InjectableTypeListenerTest.java:",
          "of " + B.class.getName(),
          "Reason: java.lang.ClassCastException: whoops, failure #3");
    }

    // non-constructed types do not participate
    assertSame(Stage.DEVELOPMENT, injector.getInstance(Stage.class));
  }

