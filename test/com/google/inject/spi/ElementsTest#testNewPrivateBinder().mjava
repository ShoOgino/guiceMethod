  public void testNewPrivateBinder() {
    final Key<Collection> collection = Key.get(Collection.class, SampleAnnotation.class);
    final Key<ArrayList> arrayList = Key.get(ArrayList.class);
    final ImmutableSet<Key<?>> collections = ImmutableSet.<Key<?>>of(arrayList, collection);

    final Key<?> a = Key.get(String.class, Names.named("a"));
    final Key<?> b = Key.get(String.class, Names.named("b"));
    final ImmutableSet<Key<?>> ab = ImmutableSet.of(a, b);

    checkModule(
        new AbstractModule() {
          protected void configure() {
            PrivateBinder one = binder().newPrivateBinder();
            one.expose(ArrayList.class);
            one.expose(Collection.class).annotatedWith(SampleAnnotation.class);
            one.bind(List.class).to(ArrayList.class);

            PrivateBinder two = binder().withSource("1 ElementsTest.java")
                .newPrivateBinder().withSource("2 ElementsTest.java");
            two.expose(String.class).annotatedWith(Names.named("a"));
            two.expose(b);
            two.bind(List.class).to(ArrayList.class);
          }
        },

        new FailingElementVisitor() {
          @Override public Void visitPrivateEnvironment(PrivateEnvironment one) {
            assertEquals(collections, one.getExposedKeys());
            checkElements(one.getElements(),
                new FailingElementVisitor() {
                  @Override public <T> Void visitBinding(Binding<T> binding) {
                    assertEquals(Key.get(List.class), binding.getKey());
                    return null;
                  }
                }
            );
            return null;
          }
        },

        new FailingElementVisitor() {
          @Override public <T> Void visitBinding(Binding<T> binding) {
            assertTrue(binding instanceof ExposedBinding);
            assertEquals(arrayList, binding.getKey());
            binding.acceptTargetVisitor(new FailingTargetVisitor<T>() {
              @Override public Void visitExposed(ExposedBinding<? extends T> binding) {
                assertEquals(collections, binding.getPrivateEnvironment().getExposedKeys());
                return null;
              }
            });
            return null;
          }
        },

        new FailingElementVisitor() {
          @Override public <T> Void visitBinding(Binding<T> binding) {
            assertTrue(binding instanceof ExposedBinding);
            assertEquals(collection, binding.getKey());
            binding.acceptTargetVisitor(new FailingTargetVisitor<T>() {
              @Override public Void visitExposed(ExposedBinding<? extends T> binding) {
                assertEquals(collections, binding.getPrivateEnvironment().getExposedKeys());
                return null;
              }
            });
            return null;
          }
        },

        new FailingElementVisitor() {
          @Override public Void visitPrivateEnvironment(PrivateEnvironment two) {
            assertEquals(ab, two.getExposedKeys());
            assertEquals("1 ElementsTest.java", two.getSource());
            checkElements(two.getElements(),
                new FailingElementVisitor() {
                  @Override public <T> Void visitBinding(Binding<T> binding) {
                    assertEquals("2 ElementsTest.java", binding.getSource());
                    assertEquals(Key.get(List.class), binding.getKey());
                    return null;
                  }
                }
            );
            return null;
          }
        },

        new FailingElementVisitor() {
          @Override public <T> Void visitBinding(Binding<T> binding) {
            assertTrue(binding instanceof ExposedBinding);
            assertEquals(a, binding.getKey());
            assertEquals("2 ElementsTest.java", binding.getSource());
            binding.acceptTargetVisitor(new FailingTargetVisitor<T>() {
              @Override public Void visitExposed(ExposedBinding<? extends T> binding) {
                assertEquals(ab, binding.getPrivateEnvironment().getExposedKeys());
                return null;
              }
            });
            return null;
          }
        },

        new FailingElementVisitor() {
          @Override public <T> Void visitBinding(Binding<T> binding) {
            assertTrue(binding instanceof ExposedBinding);
            assertEquals(b, binding.getKey());
            assertEquals("2 ElementsTest.java", binding.getSource());
            binding.acceptTargetVisitor(new FailingTargetVisitor<T>() {
              @Override public Void visitExposed(ExposedBinding<? extends T> binding) {
                assertEquals(ab, binding.getPrivateEnvironment().getExposedKeys());
                return null;
              }
            });
            return null;
          }
        }
    );
  }

