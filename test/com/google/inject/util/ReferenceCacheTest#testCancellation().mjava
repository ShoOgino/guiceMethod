  public void testCancellation() {
    final AtomicInteger count = new AtomicInteger();

    final ReferenceCache rc = new ReferenceCache() {
      protected Object create(Object key) {
        try {
          cancel();
          Thread.sleep(10);
          return null;
        } catch (InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
    };

    Thread[] threads = new Thread[3];
    for (int i = 0; i < 3; i++) {
      threads[i] = new Thread() {
        public void run() {
          try {
            rc.get("foo");
            fail();
          } catch (CancellationException e) {
            count.incrementAndGet();
          }
        }
      };
    }
    for (int i = 0; i < 3; i++) {
      threads[i].start();
    }
    for (int i = 0; i < 3; i++) {
      try {
        threads[i].join();
      } catch (InterruptedException e) {
        throw new RuntimeException(e);
      }
    }

    assertEquals(threads.length, count.get());
  }

