  public void testDirectViolation() {
    Module module = new AbstractModule() {
      protected void configure() {
        bind(Style.class).in(Annually.class);
        bind(SleeveLenth.class).in(Seasonally.class);
        bind(Shirt.class).in(Annually.class);
      }
    };

    ScopeChecker scopeChecker = new ScopeChecker(Guice.createInjector(scopesModule, module));
    try {
      scopeChecker.check(Annually.class, Seasonally.class, Daily.class);
      fail();
    } catch (ConfigurationException expected) {
      assertContains(expected.getMessage(),
          "1) Illegal scoped dependency: " + Shirt.class.getName() + " in @Annually",
          "  depends on " + SleeveLenth.class.getName() + " in @Seasonally");
    }
  }

