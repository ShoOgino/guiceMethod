  public void testBindingAnnotationsOnMethodsAndConstructors() {
    try {
      Guice.createInjector().getInstance(B.class);
      fail();
    } catch (ProvisionException expected) {
      assertContains(expected.getMessage(),
          "Error at " + B.class.getName() + ".injectMe(ErrorMessagesTest.java:",
          "method " + B.class.getName() + ".injectMe() ",
          "is annotated with @", Green.class.getName() + "(), ",
          "but binding annotations should be applied to its parameters instead.");
    }

    try {
      Guice.createInjector().getInstance(C.class);
      fail();
    } catch (ProvisionException expected) {
      assertContains(expected.getMessage(),
          "Error at " + C.class.getName() + ".<init>(ErrorMessagesTest.java:",
          "constructor " + C.class.getName() + "() ",
          "is annotated with @", Green.class.getName() + "(), ",
          "but binding annotations should be applied to its parameters instead.");
    }
  }

