  public void testNullCustomValue() {
    Module module = new AbstractModule() {
      protected void configure() {
        convertToTypes(Matchers.only(TypeLiteral.get(Date.class)), new TypeConverter() {
          public Object convert(String value, TypeLiteral<?> toType) {
            return null;
          }

          @Override public String toString() {
            return "TypeConverter<Null>";
          }
        });
        bindConstant().annotatedWith(NumericValue.class).to("foo");
        bind(DateHolder.class);
      }
    };

    try {
      Guice.createInjector(module);
      fail();
    } catch (CreationException expected) {
      assertContains(expected.getMessage(),
          "Error at " + DateHolder.class.getName() + ".date(TypeConversionTest.java:",
          "Received null converting 'foo' (bound at ", getClass().getName(),
          ".configure(TypeConversionTest.java:", "to java.util.Date",
          "using TypeConverter<Null> which matches only(java.util.Date) ",
          "(bound at " + getClass().getName(), ".configure(TypeConversionTest.java:");
    }
  }

