  /**
   * Performs creation-time injections on all objects that require it. Whenever fulfilling an
   * injection depends on another object that requires injection, we use {@link
   * InternalContext#ensureMemberInjected} to inject that member first.
   *
   * <p>If the two objects are codependent (directly or transitively), ordering of injection is
   * arbitrary.
   */
  void fulfillOutstandingInjections(final Errors errors) {
    try {
      callInContext(new ContextualCallable<Void>() {
        public Void call(InternalContext context) {
          // loop over a defensive copy, since ensureMemberInjected() mutates the set
          for (Object toInject : Lists.newArrayList(outstandingInjections)) {
            try {
              context.ensureMemberInjected(errors, toInject);
            } catch (ErrorsException e) {
              errors.merge(e.getErrors());
            }
          }
          return null;
        }
      });
    }
    catch (ErrorsException e) {
      throw new AssertionError(e);
    }

    if (!outstandingInjections.isEmpty()) {
      throw new AssertionError("failed to satisfy " + outstandingInjections);
    }
  }

