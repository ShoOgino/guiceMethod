    @SuppressWarnings("unchecked") // the constructor promises to construct 'T's
    ProxyConstructor(List<Method> methods, List<MethodInterceptorsPair> methodInterceptorsPairs,
        Enhancer enhancer, InjectionPoint injectionPoint) {
      this.enhanced = enhancer.createClass(); // this returns a cached class if possible
      this.injectionPoint = injectionPoint;
      this.constructor = (Constructor<T>) injectionPoint.getMember();

      ImmutableMap.Builder<Method, List<MethodInterceptor>> interceptorsMapBuilder = null; // lazy

      this.callbacks = new Callback[methods.size()];
      for (int i = 0; i < methods.size(); i++) {
        MethodInterceptorsPair pair = methodInterceptorsPairs.get(i);

        if (!pair.hasInterceptors()) {
          callbacks[i] = NO_OP_METHOD_INTERCEPTOR;
          continue;
        }

        if (interceptorsMapBuilder == null) {
          interceptorsMapBuilder = ImmutableMap.builder();
        }
        interceptorsMapBuilder.put(pair.method, ImmutableList.copyOf(pair.interceptors));
        callbacks[i] = new InterceptorStackCallback(pair.method, pair.interceptors);
      }

      FastClass fastClass = BytecodeGen.newFastClass(enhanced, Visibility.forMember(constructor));
      this.fastConstructor = fastClass.getConstructor(constructor.getParameterTypes());
      this.methodInterceptors = interceptorsMapBuilder != null
          ? interceptorsMapBuilder.build()
          : ImmutableMap.<Method, List<MethodInterceptor>>of();
    }

