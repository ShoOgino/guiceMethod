  private static <M extends Member & AnnotatedElement> void addInjectorsForMembers(
      TypeLiteral<?> typeLiteral, Factory<M> factory, boolean statics,
      Collection<InjectionPoint> injectionPoints, Errors errors) {
    for (M member : factory.getMembers(getRawType(typeLiteral.getType()))) {
      if (isStatic(member) != statics) {
        continue;
      }

      boolean optional;
      Inject guiceInject = member.getAnnotation(Inject.class);
      if (guiceInject == null) {
        javax.inject.Inject javaxInject = member.getAnnotation(javax.inject.Inject.class);
        if (javaxInject == null) {
          continue;
        }
        optional = javaxInject.optional();
      } else {
        optional = guiceInject.optional();
      }

      try {
        injectionPoints.add(factory.create(typeLiteral, member, optional, errors));
      } catch (ConfigurationException ignorable) {
        if (!optional) {
          errors.merge(ignorable.getErrorMessages());
        }
      }
    }
  }

