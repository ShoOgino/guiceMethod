  public <T> ConstructionProxy<T> get(final InjectionPoint injectionPoint) {
    @SuppressWarnings("unchecked") // the injection point is for a constructor of T
    final Constructor<T> constructor = (Constructor<T>) injectionPoint.getMember();

    // We can't use FastConstructor if the constructor is non-public.
    if (!Modifier.isPublic(constructor.getModifiers())) {
      constructor.setAccessible(true);
      return new ConstructionProxy<T>() {
        public T newInstance(Object... arguments) throws InvocationTargetException {
          try {
            return constructor.newInstance(arguments);
          } catch (InstantiationException e) {
            throw new AssertionError(e); // shouldn't happen, we know this is a concrete type
          } catch (IllegalAccessException e) {
            throw new AssertionError(e); // a security manager is blocking us, we're hosed
          }
        }
        public InjectionPoint getInjectionPoint() {
          return injectionPoint;
        }
        public Constructor<T> getConstructor() {
          return constructor;
        }
      };
    }

    return new ConstructionProxy<T>() {
      Class<T> classToConstruct = constructor.getDeclaringClass();
      FastClass fastClass = newFastClass(classToConstruct, Visibility.forMember(constructor));
      final FastConstructor fastConstructor = fastClass.getConstructor(constructor);

      @SuppressWarnings("unchecked")
      public T newInstance(Object... arguments) throws InvocationTargetException {
        return (T) fastConstructor.newInstance(arguments);
      }
      public InjectionPoint getInjectionPoint() {
        return injectionPoint;
      }
      public Constructor<T> getConstructor() {
        return constructor;
      }
    };
  }

