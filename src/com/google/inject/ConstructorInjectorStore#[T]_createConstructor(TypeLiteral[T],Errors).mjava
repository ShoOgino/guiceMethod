  private <T> ConstructorInjector<T> createConstructor(TypeLiteral<T> type, Errors errors)
      throws ErrorsException {

    InjectionPoint injectionPoint = InjectionPoint.forConstructorOf(type);
    ImmutableList<SingleParameterInjector<?>> constructorParameterInjectors
        = injector.getParametersInjectors(injectionPoint.getDependencies(), errors);
    ImmutableList<SingleMemberInjector> memberInjectors = injector.injectors.get(type, errors);

    ImmutableSet.Builder<InjectionPoint> injectableMembersBuilder = ImmutableSet.builder();
    for (SingleMemberInjector memberInjector : memberInjectors) {
      injectableMembersBuilder.add(memberInjector.getInjectionPoint());
    }
    ImmutableSet<InjectionPoint> injectableMembers = injectableMembersBuilder.build();

    ProxyFactory<T> proxyFactory = new ProxyFactory<T>(injectionPoint, injector.methodAspects);
    EncounterImpl<T> encounter = new EncounterImpl<T>();
    InjectableType<T> injectableType = new InjectableTypeImpl<T>(
        injectionPoint, type, injectableMembers, proxyFactory.getInterceptors());

    for (InjectableTypeListenerBinding typeListener : injectableTypeListenerBindings) {
      if (typeListener.getTypeMatcher().matches(type)) {
        // TODO: wrap this user code in a better try/catch block
        typeListener.getListener().hear(injectableType, encounter);
      }
    }

    // rebuild the proxy factory and injectable type if new interceptors were added
    if (encounter.hasAddedAspects()) {
      proxyFactory = new ProxyFactory<T>(
          injectionPoint, concat(injector.methodAspects, encounter.aspects));
      injectableType = new InjectableTypeImpl<T>(
          injectionPoint, type, injectableMembers, proxyFactory.getInterceptors());
    }

    return new ConstructorInjector<T>(proxyFactory.create(), constructorParameterInjectors,
        memberInjectors, encounter.getInjectionListeners(), injectableType);
  }

