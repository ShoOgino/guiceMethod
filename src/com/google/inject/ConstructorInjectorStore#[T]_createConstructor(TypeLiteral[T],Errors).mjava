  private <T> ConstructorInjector<T> createConstructor(TypeLiteral<T> type, Errors errors)
      throws ErrorsException {
    int numErrorsBefore = errors.size();

    InjectionPoint injectionPoint;
    try {
      injectionPoint = InjectionPoint.forConstructorOf(type);
    } catch (ConfigurationException e) {
      errors.merge(e.getErrorMessages());
      throw errors.toException();
    }

    ImmutableList<SingleParameterInjector<?>> constructorParameterInjectors
        = injector.getParametersInjectors(injectionPoint.getDependencies(), errors);
    MembersInjectorImpl<T> membersInjector = injector.membersInjectorStore.get(type, errors);

    ImmutableList<MethodAspect> methodAspects = membersInjector.getAddedAspects().isEmpty()
        ? injector.methodAspects
        : ImmutableList.copyOf(concat(injector.methodAspects, membersInjector.getAddedAspects()));

    ProxyFactory<T> proxyFactory = new ProxyFactory<T>(injectionPoint, methodAspects);

    errors.throwIfNewErrors(numErrorsBefore);

    return new ConstructorInjector<T>(membersInjector.getInjectionPoints(), proxyFactory.create(),
        constructorParameterInjectors, membersInjector);
  }

