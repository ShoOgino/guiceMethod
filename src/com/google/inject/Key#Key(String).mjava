  /**
   * Constructs a new key. Derives the type from this class's type parameter.
   *
   * <p>Clients create an empty anonymous subclass. Doing so embeds the type
   * parameter in the anonymous class's type hierarchy so we can reconstitute it
   * at runtime despite erasure.
   *
   * <p>Example usage for a binding of type {@code Foo} annotated with
   * {@code @Named("bar")}:
   *
   * <p>{@code new Key<Foo>("bar") {}}.
   */
  @SuppressWarnings("unchecked")
  protected Key(String name) {
    this.annotationStrategy = strategyFor(new NamedImpl(name));
    this.typeLiteral
        = (TypeLiteral<T>) TypeLiteral.fromSuperclassTypeParameter(getClass());
    this.hashCode = computeHashCode();
  }

