  InternalFactory<? extends T> getInternalFactory(InjectorImpl injector) {
    if (this.factory == null && !key.hasAnnotationType()) {
      // Try an implicit binding.
      final ImplicitImplementation<T> implicitImplementation =
          new ImplicitImplementation<T>(key, scope, source);
      binder.creationListeners.add(implicitImplementation);

      // We need to record the scope. If it's singleton, we'll preload in prod.
      if (this.scope == null) {
        // We can ignore errors because the error will already have been
        // recorded.
        this.scope = Scopes.getScopeForType(
            key.getTypeLiteral().getRawType(), binder.scopes, IGNORE_ERRORS);
      }

      return implicitImplementation;
    }

    return Scopes.scope(this.key, injector, this.factory, scope);
  }

