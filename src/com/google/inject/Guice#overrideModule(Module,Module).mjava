  /**
   * Returns a new {@link Module} that overlays {@code overridesModule} over
   * {@code module}. If a key is bound by both modules, only the binding in
   * overrides is kept. This can be used to replace bindings in a production
   * module with test bindings:
   * <pre>
   * Module functionalTestModule
   *     = Guice.overrideModule(new ProductionModule(), new TestModule());
   * </pre>
   */
  public static Module overrideModule(Module module, Module overridesModule) {
    final List<Element> elements = Elements.getElements(module);
    final List<Element> overrideElements = Elements.getElements(overridesModule);

    return new AbstractModule() {
      public void configure() {
        final Set<Key> overriddenKeys = Sets.newHashSet();

        // execute the overrides module, keeping track of which keys were bound
        new ModuleWriter() {
          @Override public <T> void writeBind(Binder binder, Binding<T> binding) {
            overriddenKeys.add(binding.getKey());
            super.writeBind(binder, binding);
          }
          @Override public void writeBindConstant(Binder binder, BindConstant command) {
            overriddenKeys.add(command.getKey());
            super.writeBindConstant(binder, command);
          }
        }.apply(binder(), overrideElements);

        // bind the regular module, skipping overridden keys. We only skip each
        // overridden key once, so things still blow up if the module binds the
        // same key multiple times
        new ModuleWriter() {
          @Override public <T> void writeBind(Binder binder, Binding<T> binding) {
            if (!overriddenKeys.remove(binding.getKey())) {
              super.writeBind(binder, binding);
            }
          }
          @Override public void writeBindConstant(Binder binder, BindConstant command) {
            if (!overriddenKeys.remove(command.getKey())) {
              super.writeBindConstant(binder, command);
            }
          }
        }.apply(binder(), elements);

        // TODO: bind the overridden keys using multibinder
      }
    };
  }

