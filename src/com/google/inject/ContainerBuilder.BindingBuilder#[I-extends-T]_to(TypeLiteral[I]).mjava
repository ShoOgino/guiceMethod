    /**
     * Binds to instances of the given implementation type. The
     * {@link Container} will inject the implementation instances as well. Sets
     * the scope based on an annotation on the implementation class if present.
     */
    public <I extends T> BindingBuilder<T> to(
        final TypeLiteral<I> implementation) {
      ensureImplementationIsNotSet();
      this.implementation = implementation;
      final DefaultFactory<I> defaultFactory
          = new DefaultFactory<I>(key, implementation);
      this.factory = defaultFactory;
      creationListeners.add(new CreationListener() {
        public void notify(final ContainerImpl container) {
          container.withErrorHandler(errorHandler, new Runnable() {
            public void run() {
              defaultFactory.setConstructor(
                  container.getConstructor(implementation));
            }
          });
        }
      });
      return this;
    }

