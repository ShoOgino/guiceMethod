  public <S extends T> ScopedBindingBuilder toConstructor(Constructor<S> constructor,
      TypeLiteral<? extends S> type) {
    checkNotNull(constructor, "constructor");
    checkNotNull(type, "type");
    checkNotTargetted();

    BindingImpl<T> base = getBinding();

    Set<InjectionPoint> injectionPoints;
    try {
      injectionPoints = InjectionPoint.forInstanceMethodsAndFields(type);
    } catch (ConfigurationException e) {
      copyErrorsToBinder(e);
      injectionPoints = e.getPartialValue();
    }

    try {
      @SuppressWarnings("unchecked") // safe; constructor is a subtype of toConstruct
      InjectionPoint constructorPoint = InjectionPoint.forConstructor(constructor, type);
      setBinding(new ConstructorBindingImpl<T>(base.getKey(), base.getSource(), base.getScoping(),
          constructorPoint, injectionPoints));
    } catch (ConfigurationException e) {
      copyErrorsToBinder(e);
    }

    return this;
  }

