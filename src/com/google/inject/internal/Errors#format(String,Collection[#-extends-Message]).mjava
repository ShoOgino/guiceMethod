  public static String format(String heading, Collection<? extends Message> errorMessages) {
    Formatter fmt = new Formatter().format(heading).format(":%n%n");
    int index = 1;
    for (Message errorMessage : errorMessages) {
      fmt.format("%s) %s%n", index++, errorMessage.getMessage());

      List<Object> dependencies = errorMessage.getSources();
      for (int i = dependencies.size() - 1; i >= 0; i--) {
        Object source = dependencies.get(i);

        if (source instanceof Dependency) {
          Dependency<?> dependency = (Dependency<?>) source;

          InjectionPoint injectionPoint = dependency.getInjectionPoint();
          if (injectionPoint != null) {
            Member member = injectionPoint.getMember();
            Class<? extends Member> memberType = MoreTypes.memberType(member);
            if (memberType == Field.class) {
              fmt.format("  for field at %s%n", StackTraceElements.forMember(member));
            } else if (memberType == Method.class || memberType == Constructor.class) {
              fmt.format("  for parameter %s at %s%n",
                  dependency.getParameterIndex(), StackTraceElements.forMember(member));
            } else {
              throw new AssertionError();
            }
          } else {
            fmt.format("  while locating %s%n", convert(dependency.getKey()));
          }
        }

        fmt.format("  at %s%n", sourceToString(source));
      }

      fmt.format("%n");
    }

    return fmt.format("%s error[s]", errorMessages.size()).toString();
  }

