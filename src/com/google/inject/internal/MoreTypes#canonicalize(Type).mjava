  /**
   * Returns a type that is functionally equal but not necessarily equal
   * according to {@link Object#equals(Object) Object.equals()}. The returned
   * type is {@link Serializable}.
   */
  public static Type canonicalize(Type type) {
    if (type instanceof ParameterizedTypeImpl
        || type instanceof GenericArrayTypeImpl) {
      return type;

    } else if (type instanceof ParameterizedType) {
      ParameterizedType p = (ParameterizedType) type;
      return Types.newParameterizedTypeWithOwner(p.getOwnerType(),
          p.getRawType(), p.getActualTypeArguments());

    } else if (type instanceof GenericArrayType) {
      GenericArrayType g = (GenericArrayType) type;
      return Types.arrayOf(g.getGenericComponentType());

    } else if (type instanceof Class<?> && ((Class<?>) type).isArray()) {
      Class<?> c = (Class<?>) type;
      return Types.arrayOf(c.getComponentType());

    } else {
      // type is either serializable as-is or unsupported
      return type;
    }
  }

