  public Object createProxy(Errors errors, Class<?> expectedType) throws ErrorsException {
    // TODO: if I create a proxy which implements all the interfaces of
    // the implementation type, I'll be able to get away with one proxy
    // instance (as opposed to one per caller).

    if (!expectedType.isInterface()) {
      throw errors.cannotSatisfyCircularDependency(expectedType).toException();
    }

    if (invocationHandlers == null) {
      invocationHandlers = new ArrayList<DelegatingInvocationHandler<T>>();
    }

    DelegatingInvocationHandler<T> invocationHandler = new DelegatingInvocationHandler<T>();
    invocationHandlers.add(invocationHandler);

    ClassLoader classLoader = BytecodeGen.getClassLoader(expectedType);
    return expectedType.cast(Proxy.newProxyInstance(classLoader,
        new Class[] { expectedType, CircularDependencyProxy.class }, invocationHandler));
  }

