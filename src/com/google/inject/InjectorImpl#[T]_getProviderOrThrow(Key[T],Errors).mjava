  <T> Provider<T> getProviderOrThrow(final Key<T> key, Errors errors)
      throws ErrorsException {
    final InternalFactory<? extends T> factory = getInternalFactory(key, errors);

    return new Provider<T>() {
      public T get() {
        final Errors errors = new Errors();
        try {
          T t = callInContext(new ContextualCallable<T>() {
            public T call(InternalContext context) throws ErrorsException {
              Dependency<T> dependency = Dependency.get(key);
              context.setDependency(dependency);
              errors.pushSource(dependency);
              try {
                return factory.get(errors, context, dependency);
              }
              finally {
                context.setDependency(null);
                errors.popSource(dependency);
              }
            }
          });
          errors.throwIfNecessary();
          return t;
        } catch (ErrorsException e) {
          throw new ProvisionException(errors.merge(e.getErrors()));
        }
      }

      @Override public String toString() {
        return factory.toString();
      }
    };
  }

