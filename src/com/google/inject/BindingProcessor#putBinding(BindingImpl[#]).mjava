  private void putBinding(BindingImpl<?> binding) {
    Key<?> key = binding.getKey();

    Class<?> rawType = key.getRawType();
    if (FORBIDDEN_TYPES.contains(rawType)) {
      errors.cannotBindToGuiceType(rawType.getSimpleName());
      return;
    }

    Binding<?> original = state.getExplicitBinding(key);
    if (original != null && !"com.google.inject.privatemodules.PrivateModule$Expose"
        .equals(original.acceptTargetVisitor(GET_BOUND_PROVIDER_CLASS_NAME))) {
      // the hard-coded class name is certainly lame, but it avoids an even lamer dependency...
      errors.bindingAlreadySet(key, original.getSource());
      return;
    }

    // prevent the parent from creating a JIT binding for this key
    state.parent().blacklist(key);
    state.putBinding(key, binding);
  }

