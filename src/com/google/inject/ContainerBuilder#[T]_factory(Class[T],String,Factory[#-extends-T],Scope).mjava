  /**
   * Maps a factory to a given dependency type and name.
   *
   * @param type of dependency
   * @param name of dependency
   * @param factory creates objects to inject
   * @param scope scope of injected instances
   * @return this builder
   */
  public <T> ContainerBuilder factory(final Class<T> type, final String name,
      final Factory<? extends T> factory, Scope scope) {
    InternalFactory<T> internalFactory =
        new InternalFactory<T>() {

          public T create(InternalContext context) {
            try {
              Context externalContext = context.getExternalContext();
              return factory.create(externalContext);
            } catch (Exception e) {
              throw new RuntimeException(e);
            }
          }

          public String toString() {
            return new LinkedHashMap<String, Object>() {{
              put("type", type);
              put("name", name);
              put("factory", factory);
            }}.toString();
          }
        };

    return factory(Key.get(type, name), internalFactory, scope);
  }

