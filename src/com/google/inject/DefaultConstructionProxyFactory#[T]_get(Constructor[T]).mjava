  public <T> ConstructionProxy<T> get(final Constructor<T> constructor) {
    // We can't use FastConstructor if the constructor is private or protected.
    if (Modifier.isPrivate(constructor.getModifiers())
        || Modifier.isProtected(constructor.getModifiers())) {
      constructor.setAccessible(true);
      return new ConstructionProxy<T>() {
        public T newInstance(Object... arguments) throws
            InvocationTargetException {
          try {
            return constructor.newInstance(arguments);
          }
          catch (InstantiationException e) {
            throw new RuntimeException(e);
          }
          catch (IllegalAccessException e) {
            throw new AssertionError(e);
          }
        }
      };
    }

    Class<T> classToConstruct = constructor.getDeclaringClass();
    FastClass fastClass = GuiceFastClass.create(classToConstruct);
    final FastConstructor fastConstructor
        = fastClass.getConstructor(constructor);
    return new ConstructionProxy<T>() {
      @SuppressWarnings("unchecked")
      public T newInstance(Object... arguments)
          throws InvocationTargetException {
        return (T) fastConstructor.newInstance(arguments);
      }
    };
  }

