    public SingleMethodInjector(Errors errors, InjectorImpl injector, final Method method)
        throws ErrorsException {
      // We can't use FastMethod if the method is private.
      if (Modifier.isPrivate(method.getModifiers())
          || Modifier.isProtected(method.getModifiers())) {
        method.setAccessible(true);
        methodInvoker = new MethodInvoker() {
          public Object invoke(Object target, Object... parameters)
              throws IllegalAccessException, InvocationTargetException {
            return method.invoke(target, parameters);
          }
        };
      } else {
        FastClass fastClass = newFastClass(method.getDeclaringClass(),
            Visibility.forMember(method));
        final FastMethod fastMethod = fastClass.getMethod(method);

        methodInvoker = new MethodInvoker() {
          public Object invoke(Object target, Object... parameters)
              throws IllegalAccessException, InvocationTargetException {
            return fastMethod.invoke(target, parameters);
          }
        };
      }

      injectionPoint = InjectionPoint.get(method);

      parameterInjectors = injectionPoint.getDependencies().isEmpty()
          ? null
          : injector.getParametersInjectors(method, injectionPoint.getDependencies(), errors);
    }

