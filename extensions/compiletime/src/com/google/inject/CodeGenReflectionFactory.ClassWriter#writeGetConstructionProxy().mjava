    void writeGetConstructionProxy() throws IOException {
      writeLine("  public <T> ConstructionProxy<T> getConstructionProxy(Class<T> implementation) {");

      for (Map.Entry<Class<?>, ConstructionProxy<?>> entry : constructionProxies.entrySet()) {
        String implementation = typeName(entry.getKey());
        writeLine("    if (implementation == %s.class) {", implementation);
        writeLine("      return (ConstructionProxy) new ConstructionProxy<%s>() {", implementation);
        writeLine("        public %s newInstance(final Object... arguments) throws InvocationTargetException {", implementation);
        writeLine("          return new %s(", implementation);
        int argument = 0;
        for (Iterator<Parameter<?>> i = entry.getValue().getParameters().iterator(); i.hasNext(); ) {
          Parameter<?> parameter = i.next();
          String separator = i.hasNext() ? "," : "";
          writeLine("              (%s) arguments[%d]%s", typeName(parameter.getKey().getTypeLiteral().getType()), argument, separator);
          argument++;
        }
        writeLine("          );");
        writeLine("        }");
        writeLine("        public List<Parameter<?>> getParameters() {");
        writeLine("          return Arrays.<Parameter<?>>asList(");
        for (Iterator<Parameter<?>> i = entry.getValue().getParameters().iterator(); i.hasNext(); ) {
          Parameter<?> parameter = i.next();
          String separator = i.hasNext() ? "," : "";
          writeLine("              Parameter.create(%s, %s, Nullability.%s)%s", argument, keyLiteral(parameter.getKey()), parameter.getNullability(), separator);
          argument++;
        }
        writeLine("          );");
        writeLine("        }");
        writeLine("        public Member getMember() {");
        writeLine("          return null;");
        writeLine("        }");
        writeLine("      };");
        writeLine("    }");
      }
      writeLine();
      writeLine("    throw new IllegalArgumentException();");
      writeLine("  }");
    }

