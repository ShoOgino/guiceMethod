    void writeClass() throws IOException {
      out.writePackageHeader();
      out.writeImport(Reflection.class);
      out.writeImport(ConstructionProxy.class);
      out.writeImport(InvocationTargetException.class);
      out.writeImport(Parameter.class);
      out.writeImport(List.class);
      out.writeImport(Member.class);
      out.writeImport(Parameter.class);
      out.writeImport(Arrays.class);
      out.writeImport(SuppressWarnings.class);
      out.writeImport(Key.class);
      out.writeImport(IllegalArgumentException.class);
      out.writeImport(Object.class);
      for (Map.Entry<Class<?>, ConstructionProxy<?>> entry : constructionProxies.entrySet()) {
        out.writeImport(entry.getKey());
        for (Parameter<?> parameter : entry.getValue().getParameters()) {
          out.writeImport(parameter.getKey().getTypeLiteral().getType());
        }
      }

      out.writeLine()
          .openScope("public class %s implements %s {", generatedClassSimpleName(), Reflection.class)
          .writeLine();

      writeGetConstructionProxy();

      out.writeLine()
          .closeScope("}");
    }

