  private void configurePublicBindings(Binder publicBinder) {
    exposes = Sets.newLinkedHashSet();
    Key<Ready> readyKey = Key.get(Ready.class, UniqueAnnotations.create());
    readyProvider = publicBinder.getProvider(readyKey);
    try {
      List<Element> privateElements = Elements.getElements(this); // reentrant on configure()
      Set<Key<?>> privatelyBoundKeys = getBoundKeys(privateElements);
      final Module privateModule = new ModuleWriter().create(privateElements);

      for (Expose<?> expose : exposes) {
        if (!privatelyBoundKeys.contains(expose.key)) {
          publicBinder.addError("Could not expose() at %s%n %s must be explicitly bound.",
              expose.source, expose.key);
        } else {
          expose.configure(publicBinder);
        }
      }

      // create the private injector while the public injector is injecting its members. This is
      // necessary so the providers from getProvider() will work. We use provider injection as our
      // hook. Guice promises that initialize() will be called before a Ready is returned.
      publicBinder.bind(readyKey).toProvider(new Provider<Ready>() {
        @Inject void initialize(Injector publicInjector) {
          publicInjector.createChildInjector(privateModule);
        }

        public Ready get() {
          return new Ready();
        }
      });

    } finally {
      readyProvider = null;
      exposes = null;
    }
  }

