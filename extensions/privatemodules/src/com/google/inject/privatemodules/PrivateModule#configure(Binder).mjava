  /*
   * This implementation is complicated in order to satisfy two different roles in one class:
   *
   *  1. As a public module (the one that installs this), we bind only the exposed keys. This is the
   *     role we play first, when configure() is called by the installing binder. It collects the
   *     exposed keys and their corresponding providers by executing itself as a private module.
   *
   *  2. As a private module, we bind everything. This is performed our own indirect re-entrant call
   *     to configure() via the Elements.getElements() API.
   *
   * Throwing further wrenches into the mix:
   *
   *  o Provider methods. The ProviderMethodsModule class special cases modules that extend
   *    PrivateModules to skip them by default. We have our own provider methods backdoor API
   *    called ProviderMethodsModule.forPrivateModule so provider methods are only applied when
   *    we're running as a private module. We also need to iterate through the provider methods
   *    by hand to gather the ones with the @Exposed annotation
   *
   *  o Injector creation time. Dependencies can flow freely between child and parent injectors.
   *    When providers are being exercised, we need to make sure the child injector construction
   *    has started.
   */
  public final synchronized void configure(Binder binder) {
    // when 'exposes' is null, we're being run for the public injector
    if (exposes == null) {
      configurePublicBindings(binder);
      return;
    }

    // otherwise we're being run for the private injector
    checkState(this.privateBinder == null, "Re-entry is not allowed.");
    privateBinder = binder.skipSources(PrivateModule.class);
    try {
      configurePrivateBindings();

      ProviderMethodsModule providerMethods = ProviderMethodsModule.forPrivateModule(this);
      for (ProviderMethod<?> providerMethod : providerMethods.getProviderMethods(privateBinder)) {
        providerMethod.configure(privateBinder);
        if (providerMethod.getMethod().isAnnotationPresent(Exposed.class)) {
          expose(providerMethod.getKey());
        }
      }

      for (Expose<?> expose : exposes) {
        expose.initPrivateProvider(binder);
      }
    } finally {
      privateBinder = null;
    }
  }

