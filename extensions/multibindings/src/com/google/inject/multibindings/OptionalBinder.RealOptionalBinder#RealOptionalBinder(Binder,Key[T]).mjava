    private RealOptionalBinder(Binder binder, Key<T> typeKey) {
      this.binder = binder;
      this.typeKey = checkNotNull(typeKey);
      TypeLiteral<T> literal = typeKey.getTypeLiteral();
      this.optionalKey = typeKey.ofType(optionalOf(literal));
      this.optionalJavaxProviderKey = typeKey.ofType(optionalOfJavaxProvider(literal));
      this.optionalProviderKey = typeKey.ofType(optionalOfProvider(literal));
      this.mapKey =
          typeKey.ofType(MapBinder.mapOfProviderOf(TypeLiteral.get(Source.class), literal));
      this.dependencies = ImmutableSet.<Dependency<?>>of(Dependency.get(mapKey));
      this.optionalProviderT = binder.getProvider(optionalProviderKey);
      if (typeKey.getAnnotation() != null) {
        this.mapBinder = (RealMapBinder<Source, T>) MapBinder.newMapBinder(binder,
            TypeLiteral.get(Source.class), typeKey.getTypeLiteral(), typeKey.getAnnotation());
      } else if (typeKey.getAnnotationType() != null) {
        this.mapBinder = (RealMapBinder<Source, T>) MapBinder.newMapBinder(binder,
            TypeLiteral.get(Source.class), typeKey.getTypeLiteral(), typeKey.getAnnotationType());
      } else {
        this.mapBinder = (RealMapBinder<Source, T>) MapBinder.newMapBinder(binder,
            TypeLiteral.get(Source.class), typeKey.getTypeLiteral());
      }
      mapBinder.updateDuplicateKeyMessage(Source.DEFAULT, "OptionalBinder for "
          + Errors.convert(typeKey)
          + " called with different setDefault values, from bindings:\n");
      mapBinder.updateDuplicateKeyMessage(Source.ACTUAL, "OptionalBinder for "
          + Errors.convert(typeKey)
          + " called with different setBinding values, from bindings:\n");
    }

