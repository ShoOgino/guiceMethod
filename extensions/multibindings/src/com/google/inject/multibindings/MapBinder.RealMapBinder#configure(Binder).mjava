    public void configure(Binder binder) {
      final Provider<Map<K, Provider<V>>> providerMapProvider
          = new Provider<Map<K, Provider<V>>>() {
        private Map<K, Provider<V>> providerMap;

        @Inject void init(Injector injector) {
          Map<Integer, K> keys = new LinkedHashMap<Integer, K>();
          Map<Integer, Provider<V>> valueProviders = new HashMap<Integer, Provider<V>>();

          // find the bindings
          for (Map.Entry<Key<?>, Binding<?>> entry : injector.getBindings().entrySet()) {
            if (keyBinder.keyMatches(entry.getKey(), "key")) {
              Element element = (Element) entry.getKey().getAnnotation();
              @SuppressWarnings("unchecked")
              Binding<K> binding = (Binding<K>) entry.getValue();
              keys.put(element.uniqueId(), binding.getProvider().get());
            } else if (valueBinder.keyMatches(entry.getKey(), "value")) {
              Element element = (Element) entry.getKey().getAnnotation();
              @SuppressWarnings("unchecked")
              Binding<V> binding = (Binding<V>) entry.getValue();
              valueProviders.put(element.uniqueId(), binding.getProvider());
            }
          }

          // build the map
          Map<K, Provider<V>> providerMapMutable = new LinkedHashMap<K, Provider<V>>();
          for (Map.Entry<Integer, K> entry : keys.entrySet()) {
            K key = entry.getValue();
            Provider<V> valueProvider = valueProviders.get(entry.getKey());
            if (valueProvider == null) {
              continue;
            }
            if (providerMapMutable.put(key, valueProvider) != null) {
              throw new IllegalStateException("Map injection failed due to duplicated key \""
                  + key + "\"");
            }
          }

          providerMap = Collections.unmodifiableMap(providerMapMutable);
        }

        public Map<K, Provider<V>> get() {
          return providerMap;
        }
      };

      binder.bind(providerMapKey).toProvider(providerMapProvider);

      binder.bind(mapKey).toProvider(new Provider<Map<K, V>>() {
        public Map<K, V> get() {
          Map<K, V> map = new LinkedHashMap<K, V>();
          for (Map.Entry<K, Provider<V>> entry : providerMapProvider.get().entrySet()) {
            V value = entry.getValue().get();
            K key = entry.getKey();
            if (value == null) {
              throw new IllegalStateException("Map injection failed due to null value for key \"" 
                  + key + "\"");
            }
            map.put(key, value);
          }
          return Collections.unmodifiableMap(map);
        }
      });
    }

