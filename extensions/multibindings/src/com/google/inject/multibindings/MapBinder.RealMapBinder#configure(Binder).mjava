    public void configure(Binder binder) {
      if (isInitialized()) {
        throw new IllegalStateException("MapBinder was already initialized");
      }

      // binds a Map<K, Provider<V>> from a collection of Map<Entry<K, Provider<V>>
      final Provider<Set<Entry<K,Provider<V>>>> entrySetProvider
          = binder.getProvider(entrySetBinder.getSetKey());
      binder.bind(providerMapKey).toProvider(new Provider<Map<K, Provider<V>>>() {
        private Map<K, Provider<V>> providerMap;
    
        @SuppressWarnings("unused")
        @Inject void initialize() {
          RealMapBinder.this.binder = null;
          
          Map<K, Provider<V>> providerMapMutable = new LinkedHashMap<K, Provider<V>>();
          for (Map.Entry<K, Provider<V>> entry : entrySetProvider.get()) {
            if (providerMapMutable.put(entry.getKey(), entry.getValue()) != null) {
              throw new IllegalStateException("Map injection failed due to duplicated key \""
                  + entry.getKey() + "\"");
            }
          }
    
          providerMap = Collections.unmodifiableMap(providerMapMutable);
        }
    
        public Map<K, Provider<V>> get() {
          return providerMap;
        }
       });

      final Provider<Map<K, Provider<V>>> mapProvider = binder.getProvider(providerMapKey);
      binder.bind(mapKey).toProvider(new Provider<Map<K, V>>() {
        public Map<K, V> get() {
          Map<K, V> map = new LinkedHashMap<K, V>();
          for (Map.Entry<K, Provider<V>> entry : mapProvider.get().entrySet()) {
            V value = entry.getValue().get();
            K key = entry.getKey();
            if (value == null) {
              throw new IllegalStateException("Map injection failed due to null value for key \"" 
                  + key + "\"");
            }
            map.put(key, value);
          }
          return Collections.unmodifiableMap(map);
        }
      });
    }

