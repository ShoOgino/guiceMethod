  // Tests for com.google.inject.internal.WeakKeySet not leaking memory.
  public void testWeakKeySet_integration_multibinder() {
    Key<Set<String>> setKey = Key.get(new TypeLiteral<Set<String>>() {});

    Injector parentInjector = Guice.createInjector(new AbstractModule() {
          @Override protected void configure() {
            bind(String.class).toInstance("hi");
          }
        });
    WeakKeySetUtils.assertNotBlacklisted(parentInjector, setKey);

    Injector childInjector = parentInjector.createChildInjector(new AbstractModule() {
      @Override protected void configure() {
        Multibinder<String> binder = Multibinder.newSetBinder(binder(), String.class);
        binder.addBinding().toInstance("foo");
      }
    });
    WeakReference<Injector> weakRef = new WeakReference<Injector>(childInjector);
    WeakKeySetUtils.assertBlacklisted(parentInjector, setKey);
   
    // Clear the ref, GC, and ensure that we are no longer blacklisting.
    childInjector = null;
   
    GcFinalization.awaitClear(weakRef);
    WeakKeySetUtils.assertNotBlacklisted(parentInjector, setKey);
  }

