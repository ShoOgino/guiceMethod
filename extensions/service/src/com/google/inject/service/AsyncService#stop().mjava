  public synchronized final Future<State> stop() {
    Preconditions.checkState(state != null, "Must start this service before you stop it!");

    // Likewise, stops are idempotent.
    if (state == State.STOPPED) {
      return new FutureTask<State>(NOOP, State.STOPPED);
    }

    // TODO Should we bother doing the wrap, or is it enough to return
    // this future as is?
    final Future<State> task = executor.submit(new Callable<State>() {
      public State call() {
        onStop();
        return state = State.STOPPED;
      }
    });

    // Wrap it in another future to catch failures.
    return task;
//    return new FutureTask<State>(futureGet(task));
  }

