  public void testRewriteBindings() {
    // create a module the binds String.class and CharSequence.class
    Module module = new AbstractModule() {
      protected void configure() {
        bind(String.class).toInstance("Pizza");
        bind(CharSequence.class).toInstance("Wine");
      }
    };

    // record the commands from that module
    CommandRecorder commandRecorder = new CommandRecorder(new FutureInjector());
    List<Command> commands = commandRecorder.recordCommands(module);

    // create a rewriter that rewrites the binding to 'Wine' with a binding to 'Beer'
    CommandReplayer rewriter = new CommandReplayer() {
      @Override public <T> Void visitBind(BindCommand<T> command) {
        if ("Wine".equals(command.getTarget().get(null))) {
          binder().bind(CharSequence.class).toInstance("Beer");
        } else {
          super.visitBind(command);
        }
        return null;
      }
    };

    // create a module from the original list of commands and the rewriter
    Module rewrittenModule = rewriter.createModule(commands);

    // it all works
    Injector injector = Guice.createInjector(rewrittenModule);
    assertEquals("Pizza", injector.getInstance(String.class));
    assertEquals("Beer", injector.getInstance(CharSequence.class));
  }

