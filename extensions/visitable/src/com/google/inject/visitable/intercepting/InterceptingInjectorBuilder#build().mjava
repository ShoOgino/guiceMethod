  public Injector build() {
    FutureInjector futureInjector = new FutureInjector();

    // record commands from the modules
    List<Command> commands = new CommandRecorder(futureInjector).recordCommands(modules);

    // rewrite the commands to insert interception
    CommandRewriter rewriter = new CommandRewriter();
    Module module = rewriter.createModule(commands);

    // create and injector with the rewritten commands
    Injector injector = Guice.createInjector(module);

    // fail if any interceptions were missing
    if (!tolerateUnmatchedInterceptions 
        && !rewriter.keysIntercepted.equals(keysToIntercept)) {
      Set<Key> keysNotIntercepted = new HashSet<Key>(keysToIntercept);
      keysNotIntercepted.removeAll(rewriter.keysIntercepted);
      throw new IllegalArgumentException("An explicit binding is required for "
          + "all intercepted keys, but was not found for " + keysNotIntercepted);
    }

    // make the injector available for callbacks from early providers
    futureInjector.initialize(injector);

    return injector;
  }

