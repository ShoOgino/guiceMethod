  private void addProviderMethodBinding(Key key, final Object instance, final Method method) {
    final Key[] parameterKeys = parametersToKeys(
        method, method.getGenericParameterTypes(), method.getParameterAnnotations());
    final Provider<Object> unscoped = new Provider<Object>() {
      public Object get() {
        Object[] parameters = keysToValues(parameterKeys);
        try {
          return method.invoke(instance, parameters);
        } catch (IllegalAccessException e) {
          throw new RuntimeException(e);
        } catch (InvocationTargetException e) {
          throw new RuntimeException(e.getCause());
        }
      }
    };

    boolean singleton = method.getAnnotation(com.google.inject.Singleton.class) != null
        || method.getAnnotation(javax.inject.Singleton.class) != null;
    putBinding(key, unscoped, singleton);
  }

