  private void servletPath(
      final String requestPath, String mapping, final String expectedServletPath)
      throws IOException, ServletException {

    Injector injector = createMock(Injector.class);
    Binding<HttpServlet> binding = createMock(Binding.class);
    HttpServletRequest request = createMock(HttpServletRequest.class);
    HttpServletResponse response = createMock(HttpServletResponse.class);

    expect(binding.acceptScopingVisitor((BindingScopingVisitor<Boolean>) anyObject()))
        .andReturn(true);
    expect(injector.getBinding(Key.get(HttpServlet.class))).andReturn(binding);

    final boolean[] run = new boolean[1];
    //get an instance of this servlet
    expect(injector.getInstance(Key.get(HttpServlet.class)))
        .andReturn(
            new HttpServlet() {

              @Override
              protected void service(
                  HttpServletRequest servletRequest, HttpServletResponse httpServletResponse)
                  throws ServletException, IOException {

                final String path = servletRequest.getServletPath();
                assertEquals(
                    String.format("expected [%s] but was [%s]", expectedServletPath, path),
                    expectedServletPath,
                    path);
                run[0] = true;
              }
            });

    expect(request.getServletPath()).andReturn(requestPath);

    replay(injector, binding, request);

    ServletDefinition servletDefinition =
        new ServletDefinition(
            Key.get(HttpServlet.class),
            UriPatternType.get(UriPatternType.SERVLET, mapping),
            new HashMap<String, String>(),
            null);

    servletDefinition.init(null, injector, Sets.<HttpServlet>newIdentityHashSet());
    servletDefinition.doService(request, response);

    assertTrue("Servlet did not run!", run[0]);

    verify(injector, binding, request);
  }

