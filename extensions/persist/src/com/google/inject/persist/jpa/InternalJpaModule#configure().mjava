  @Override
  protected void configure() {
    bindConstant().annotatedWith(PersistModule.Persist.class).to(jpaUnit);
    bindConstant().annotatedWith(PersistModule.Persist.class).to(unitOfWork);

    if (null != properties) {
      bind(Properties.class).annotatedWith(PersistModule.Persist.class).toInstance(properties);
    } else {
      bind(Properties.class).annotatedWith(PersistModule.Persist.class)
          .toProvider(Providers.<Properties>of(null));      
    }

    bind(EntityManagerProvider.class).in(Singleton.class);
    bind(EntityManagerFactoryProvider.class).in(Singleton.class);

    bind(EntityManager.class).toProvider(EntityManagerProvider.class);
    bind(EntityManagerFactory.class).toProvider(EntityManagerFactoryProvider.class);

    bind(WorkManager.class).to(EntityManagerProvider.class);
    bind(PersistenceService.class).to(EntityManagerFactoryProvider.class);

    JpaLocalTxnInterceptor interceptor = new JpaLocalTxnInterceptor();
    requestInjection(interceptor);

    bindInterceptor(any(), annotatedWith(Transactional.class), interceptor);
  }

