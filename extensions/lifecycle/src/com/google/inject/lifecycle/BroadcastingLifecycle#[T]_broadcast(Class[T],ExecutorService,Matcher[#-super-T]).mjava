  public <T> T broadcast(Class<T> clazz, final ExecutorService executorService,
      Matcher<? super T> matcher) {
    final List<T> ts = instantiateForBroadcast(clazz, matcher);

    @SuppressWarnings("unchecked") T caster = (T) Proxy
        .newProxyInstance(clazz.getClassLoader(), new Class[] { clazz }, new InvocationHandler() {
          public Object invoke(Object o, final Method method, final Object[] objects)
              throws Throwable {

            // propagate the method call with the same arg list to all instances.
            for (final T t : ts) {
              // Submit via executor service. TODO See if this can be parallelized by
              // yet another dimension, i.e. inParallel(N)
              executorService.submit(new Callable() {
                public Object call() throws Exception {
                  return method.invoke(t, objects);
                }
              });
            }

            // We can't return from multiple instances, so just return null.
            return null;
          }
        });

    return caster;
  }

