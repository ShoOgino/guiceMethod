  @Override
  protected void setUp() throws Exception {
    MockFoo.nextToThrow = null;
    MockFoo.nextToReturn = null;
    AnotherMockFoo.nextToThrow = null;
    AnotherMockFoo.nextToReturn = null;
    
    bindInjector = Guice.createInjector(new AbstractModule() {
      @Override
      protected void configure() {
        ThrowingProviderBinder.create(binder())
            .bind(RemoteProvider.class, Foo.class)
            .to(mockRemoteProvider)
            .in(testScope);
      }
    });  
    
    providesInjector = Guice.createInjector(new AbstractModule() {
      @Override
      protected void configure() {
       install(ThrowingProviderBinder.forModule(this));
       bindScope(TestScope.Scoped.class, testScope);
      }
      
      @SuppressWarnings("unused")
      @CheckedProvides(RemoteProvider.class)
      @TestScope.Scoped
      Foo throwOrGet() throws RemoteException, BindException {
        return mockRemoteProvider.get();
      }
    });
    
    cxtorInjector = Guice.createInjector(new AbstractModule() {
      @Override
      protected void configure() {
        ThrowingProviderBinder.create(binder())
          .bind(RemoteProvider.class, Foo.class)
          .providing(MockFoo.class)
          .in(testScope);
      }
    });
  }

