    private ScopedBindingBuilder toInternal(final Key<? extends CheckedProvider<?>> targetKey) {
      final Key<Result> resultKey = Key.get(Result.class, UniqueAnnotations.create());
      // Note that this provider will behave like the final provider Guice creates.
      // It will especially do scoping if the user adds that.
      final Provider<Result> resultProvider = binder.getProvider(resultKey);
      final Provider<? extends CheckedProvider<?>> targetProvider = binder.getProvider(targetKey);
      interfaceKey = createKey();

      // don't bother binding the proxy type if this is in an invalid state.
      if(valid) {
        binder.bind(interfaceKey).toProvider(new ProviderWithDependencies<P>() {
          private final P instance = interfaceType.cast(Proxy.newProxyInstance(
              interfaceType.getClassLoader(), new Class<?>[] { interfaceType },
              new InvocationHandler() {
                public Object invoke(Object proxy, Method method, Object[] args)
                    throws Throwable {
                  // Allow methods like .equals(..), .hashcode(..), .toString(..) to work.
                  if (method.getDeclaringClass() == Object.class) {
                    return method.invoke(this, args);
                  }
                  
                  if (scopeExceptions) {
                    return resultProvider.get().getOrThrow();
                  } else {
                    Result result;
                    try {
                      result = resultProvider.get();
                    } catch (ProvisionException pe) {
                      Throwable cause = pe.getCause();
                      if (cause instanceof ResultException) {
                        throw ((ResultException)cause).getCause();
                      } else {
                        throw pe;
                      }
                    }
                    return result.getOrThrow();
                  }
                }
              }));
            
            @Override
            public P get() {
              return instance;
            }
  
            @Override
            public Set<Dependency<?>> getDependencies() {
              return ImmutableSet.<Dependency<?>>of(Dependency.get(resultKey));
            }
          });
      }

      // The provider is unscoped, but the user may apply a scope to it through the 
      // ScopedBindingBuilder this returns.
      return binder.bind(resultKey).toProvider(
          createResultProvider(targetKey, targetProvider));
    }

