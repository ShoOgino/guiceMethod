  void configure(Binder binder) {
    binder = binder.withSource(method);

    SecondaryBinder<?> sbinder = 
      ThrowingProviderBinder.create(binder)
        .bind(checkedProvider, key.getTypeLiteral().getType());
    if(key.getAnnotation() != null) {
      sbinder = sbinder.annotatedWith(key.getAnnotation());
    } else if(key.getAnnotationType() != null) {
      sbinder = sbinder.annotatedWith(key.getAnnotationType());
    } 
    ScopedBindingBuilder sbbuilder = sbinder.toProviderMethod(this);
    if(scopeAnnotation != null) {
      sbbuilder.in(scopeAnnotation);
    }

    if (exposed) {
      // the cast is safe 'cause the only binder we have implements PrivateBinder. If there's a
      // misplaced @Exposed, calling this will add an error to the binder's error queue
      ((PrivateBinder) binder).expose(sbinder.getKey());
    }

    // Validate the exceptions in the method match the exceptions
    // in the CheckedProvider.
    for(TypeLiteral<?> exType : exceptionTypes) {
      Class<?> exActual = exType.getRawType();
      // Ignore runtime exceptions & errors.
      if(RuntimeException.class.isAssignableFrom(exActual) || Error.class.isAssignableFrom(exActual)) {
        continue;
      }
      
      boolean notAssignable = true;
      for(Class<? extends Throwable> exExpected : sbinder.getExceptionTypes()) {
        if (exExpected.isAssignableFrom(exActual)) {
          notAssignable = false;
          break;
        }
      }
      if(notAssignable) {
        binder.addError(
            "%s is not compatible with the exceptions (%s) declared in the CheckedProvider interface (%s)",
            exActual, sbinder.getExceptionTypes(), checkedProvider);
      }
    }
  }

