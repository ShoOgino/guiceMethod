  private static void checkThrowable(
      Class<? extends CheckedProvider<?>> providerType, Class<? extends Throwable> thrownType) {
    try {
      thrownType.getDeclaredConstructor();
    } catch (NoSuchMethodException e) {
      throw new IllegalArgumentException(
          String.format(
              "Thrown exception <%s> must have a no-argument constructor", thrownType.getName()),
          e);
    }

    if (!isCheckedException(thrownType)) {
      return;
    }

    Method getMethod;
    try {
      getMethod = providerType.getMethod("get");
    } catch (NoSuchMethodException e) {
      throw new IllegalArgumentException(
          String.format("Provider class <%s> must have a get() method", providerType.getName()), e);
    }

    @SuppressWarnings("unchecked") // guaranteed by getExceptionTypes
    List<Class<? extends Throwable>> exceptionTypes =
        Arrays.asList((Class<? extends Throwable>[]) getMethod.getExceptionTypes());

    if (exceptionTypes.size() == 0) {
      return;
    }

    // Check if the thrown exception is declared to be thrown in the method signature.
    for (Class<? extends Throwable> exceptionType : exceptionTypes) {
      if (exceptionType.isAssignableFrom(thrownType)) {
        return;
      }
    }

    throw new IllegalArgumentException(
        String.format(
            "Thrown exception <%s> is not declared to be thrown by <%s>",
            thrownType.getName(), getMethod));
  }

