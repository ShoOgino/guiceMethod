  static boolean isSingletonBinding(Binding<?> binding) {
    final AtomicBoolean isSingleton = new AtomicBoolean(true);
    binding.acceptScopingVisitor(new DefaultBindingScopingVisitor<Void>() {
      @Override
      public Void visitNoScoping() {
        isSingleton.set(false);

        return null;
      }

      @Override
      public Void visitScopeAnnotation(Class<? extends Annotation> scopeAnnotation) {
        if (null != scopeAnnotation && !Singleton.class.equals(scopeAnnotation)) {
          isSingleton.set(false);
        }

        return null;
      }

      @Override
      public Void visitScope(Scope scope) {
        if (null != scope && !Scopes.SINGLETON.equals(scope)) {
          isSingleton.set(false);
        }

        return null;
      }
    });

    return isSingleton.get();
  }

