  /**
   * This test verifies that we can compile bindings to provider instances whose compile-time type
   * implements javax.inject.Provider but not com.google.inject.Provider. For binary compatibility,
   * we don't (and won't) support binding to instances of javax.inject.Provider.
   */
  public void testBindProviderClass() {
    Injector injector =
        Guice.createInjector(
            new AbstractModule() {
              @Override
              protected void configure() {
                bind(B.class).toProvider(BProvider.class);
                bind(B.class).annotatedWith(Names.named("1")).toProvider(BProvider.class);
                bind(B.class).annotatedWith(Names.named("2")).toProvider(Key.get(BProvider.class));
                bind(B.class)
                    .annotatedWith(Names.named("3"))
                    .toProvider(TypeLiteral.get(BProvider.class));
              }
            });

    injector.getInstance(Key.get(B.class));
    injector.getInstance(Key.get(B.class, Names.named("1")));
    injector.getInstance(Key.get(B.class, Names.named("2")));
    injector.getInstance(Key.get(B.class, Names.named("3")));
  }

