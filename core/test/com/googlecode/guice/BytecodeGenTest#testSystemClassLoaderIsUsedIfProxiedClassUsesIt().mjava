  @Test
  public void testSystemClassLoaderIsUsedIfProxiedClassUsesIt() {
    // Test relies on package access which CHILD loading doesn't have
    if (InternalFlags.getCustomClassLoadingOption() == CustomClassLoadingOption.CHILD) {
      return;
    }
    ProxyTest testProxy =
        Guice.createInjector(
                interceptorModule,
                new Module() {
                  @Override
                  public void configure(Binder binder) {
                    binder.bind(ProxyTest.class).to(ProxyTestImpl.class);
                  }
                })
            .getInstance(ProxyTest.class);

    if (ProxyTest.class.getClassLoader() == systemClassLoader) {
      assertSame(testProxy.getClass().getClassLoader(), systemClassLoader);
    } else {
      assertNotSame(testProxy.getClass().getClassLoader(), systemClassLoader);
    }
  }

