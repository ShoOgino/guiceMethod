  public void testProxyClassUnloading() {
    Object testObject = Guice.createInjector(interceptorModule, testModule)
        .getInstance(proxyTestClass);
    assertNotNull(testObject.getClass().getClassLoader());
    assertNotSame(testObject.getClass().getClassLoader(), systemClassLoader);

    // take a weak reference to the generated proxy class
    Reference<Class<?>> clazzRef = new WeakReference<Class<?>>(testObject.getClass());

    assertNotNull(clazzRef.get());

    // null the proxy
    testObject = null;

    /*
     * this should be enough to queue the weak reference
     * unless something is holding onto it accidentally.
     */
    final int MAX_COUNT = 100;
    String[] buf;
    System.gc();
    //TODO(cgruber): Use com.google.common.testing.GcFinalization and a countdown latch to un-flake.
    for (int count = 0 ; clazzRef.get() != null ; count++) {
      buf = new String[8 * 1024 * 1024];
      buf = null;
      System.gc();
      assertTrue("Timeout waiting for class to be unloaded.  This may be a flaky result.",
          count <= MAX_COUNT);
    }

    // This test could be somewhat flaky when the GC isn't working.
    // If it fails, run the test again to make sure it's failing reliably.
    assertNull("Proxy class was not unloaded.", clazzRef.get());
  }

