  public void testEncounterCannotBeUsedAfterHearReturns() {
    final AtomicReference<TypeEncounter<?>> encounterReference =
        new AtomicReference<TypeEncounter<?>>();

    Guice.createInjector(
        new AbstractModule() {
          @Override
          protected void configure() {
            bindListener(
                any(),
                new TypeListener() {
                  @Override
                  public <I> void hear(TypeLiteral<I> type, TypeEncounter<I> encounter) {
                    encounterReference.set(encounter);
                  }
                });

            bind(C.class);
          }
        });
    TypeEncounter<?> encounter = encounterReference.get();

    try {
      encounter.register(
          new InjectionListener<Object>() {
            @Override
            public void afterInjection(Object injectee) {}
          });
      fail();
    } catch (IllegalStateException expected) {
    }

    /*if[AOP]*/
    try {
      encounter.bindInterceptor(
          any(),
          new org.aopalliance.intercept.MethodInterceptor() {
            @Override
            public Object invoke(org.aopalliance.intercept.MethodInvocation methodInvocation)
                throws Throwable {
              return methodInvocation.proceed();
            }
          });
      fail();
    } catch (IllegalStateException expected) {
    }
    /*end[AOP]*/

    try {
      encounter.addError(new Exception());
      fail();
    } catch (IllegalStateException expected) {
    }

    try {
      encounter.getMembersInjector(A.class);
      fail();
    } catch (IllegalStateException expected) {
    }

    try {
      encounter.getProvider(B.class);
      fail();
    } catch (IllegalStateException expected) {
    }
  }

