  public void testOverrideIsLazy() {
    final AtomicReference<String> value = new AtomicReference<>("A");
    Module overridden =
        Modules.override(
                new AbstractModule() {
                  @Override
                  protected void configure() {
                    bind(String.class).annotatedWith(named("original")).toInstance(value.get());
                  }
                })
            .with(
                new AbstractModule() {
                  @Override
                  protected void configure() {
                    bind(String.class).annotatedWith(named("override")).toInstance(value.get());
                  }
                });

    // the value.get() call should be deferred until Guice.createInjector
    value.set("B");
    Injector injector = Guice.createInjector(overridden);
    assertEquals("B", injector.getInstance(Key.get(String.class, named("original"))));
    assertEquals("B", injector.getInstance(Key.get(String.class, named("override"))));
  }

