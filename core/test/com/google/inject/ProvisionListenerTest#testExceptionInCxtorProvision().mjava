  public void testExceptionInCxtorProvision() throws Exception {
    final CountAndCaptureExceptionListener listener = new CountAndCaptureExceptionListener();
    Injector injector =
        Guice.createInjector(
            new AbstractModule() {
              @Override
              protected void configure() {
                bindListener(
                    new AbstractMatcher<Binding<?>>() {
                      @Override
                      public boolean matches(Binding<?> binding) {
                        return binding.getKey().getRawType().equals(DependsOnFooBombInCxtor.class);
                      }
                    },
                    listener);
              }
            });
    assertEquals(0, listener.beforeProvision);
    String expectedMsg = null;
    try {
      injector.getInstance(DependsOnFooBombInCxtor.class);
      fail();
    } catch (ProvisionException expected) {
      assertEquals(1, expected.getErrorMessages().size());
      expectedMsg = Iterables.getOnlyElement(expected.getErrorMessages()).getMessage();
      assertContains(
          expected.getMessage(),
          "1) Error injecting constructor, java.lang.RuntimeException: Retry, Abort, Fail",
          " at " + FooBomb.class.getName(),
          " while locating " + FooBomb.class.getName(),
          " while locating " + DependsOnFooBombInCxtor.class.getName());
      assertContains(
          listener.capture.get().getMessage(),
          "1) Error injecting constructor, java.lang.RuntimeException: Retry, Abort, Fail",
          " at " + FooBomb.class.getName(),
          " while locating " + FooBomb.class.getName());
      // The message that is captures by the provision listener does not show what is depending on
      // the thing being listened to.
      assertThat(listener.capture.get().getMessage())
          .doesNotContain(" while locating " + DependsOnFooBombInField.class.getName());
    }
    assertEquals(1, listener.beforeProvision);
    assertEquals(
        expectedMsg,
        Iterables.getOnlyElement(((ProvisionException) listener.capture.get()).getErrorMessages())
            .getMessage());
    assertEquals(0, listener.afterProvision);
  }

