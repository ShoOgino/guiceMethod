  public void testMultibinderWithMultipleAnnotationValueSets() {
    Module module =
        new AbstractModule() {
          @Override
          protected void configure() {
            Multibinder<String> abcMultibinder =
                Multibinder.newSetBinder(binder(), String.class, named("abc"));
            abcMultibinder.addBinding().toInstance("A");
            abcMultibinder.addBinding().toInstance("B");
            abcMultibinder.addBinding().toInstance("C");

            Multibinder<String> deMultibinder =
                Multibinder.newSetBinder(binder(), String.class, named("de"));
            deMultibinder.addBinding().toInstance("D");
            deMultibinder.addBinding().toInstance("E");
          }
        };
    Injector injector = Guice.createInjector(module);

    Key<Set<String>> abcSetKey = Key.get(setOfString, named("abc"));
    Set<String> abc = injector.getInstance(abcSetKey);
    Key<Set<String>> deSetKey = Key.get(setOfString, named("de"));
    Set<String> de = injector.getInstance(deSetKey);
    Set<String> abcResults = setOf("A", "B", "C");
    assertEquals(abcResults, abc);
    Set<String> deResults = setOf("D", "E");
    assertEquals(deResults, de);
    assertSetVisitor(
        abcSetKey,
        stringType,
        setOf(module),
        BOTH,
        false,
        1,
        instance("A"),
        instance("B"),
        instance("C"));
    assertSetVisitor(
        deSetKey, stringType, setOf(module), BOTH, false, 1, instance("D"), instance("E"));
  }

