  public void testMapBinderMapDoesNotDedupeDuplicateValues() {
    class ValueType {
      int keyPart;
      int dataPart;

      private ValueType(int keyPart, int dataPart) {
        this.keyPart = keyPart;
        this.dataPart = dataPart;
      }

      @Override
      public boolean equals(Object obj) {
        return (obj instanceof ValueType) && (keyPart == ((ValueType) obj).keyPart);
      }

      @Override
      public int hashCode() {
        return keyPart;
      }
    }
    Module m1 =
        new AbstractModule() {
          @Override
          protected void configure() {
            MapBinder<String, ValueType> multibinder =
                MapBinder.newMapBinder(binder(), String.class, ValueType.class);
            multibinder.addBinding("a").toInstance(new ValueType(1, 2));
          }
        };
    Module m2 =
        new AbstractModule() {
          @Override
          protected void configure() {
            MapBinder<String, ValueType> multibinder =
                MapBinder.newMapBinder(binder(), String.class, ValueType.class);
            multibinder.addBinding("b").toInstance(new ValueType(1, 3));
          }
        };

    Injector injector = Guice.createInjector(m1, m2);
    Map<String, ValueType> map = injector.getInstance(new Key<Map<String, ValueType>>() {});
    assertEquals(2, map.get("a").dataPart);
    assertEquals(3, map.get("b").dataPart);
  }

