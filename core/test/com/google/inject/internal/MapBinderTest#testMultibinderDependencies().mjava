  /** Check that the dependencies are correct. */
  public void testMultibinderDependencies() {
    Injector injector =
        Guice.createInjector(
            new AbstractModule() {
              @Override
              protected void configure() {
                MapBinder<Integer, String> mapBinder =
                    MapBinder.newMapBinder(binder(), Integer.class, String.class);
                mapBinder.addBinding(1).toInstance("A");
                mapBinder.addBinding(2).to(Key.get(String.class, Names.named("b")));

                bindConstant().annotatedWith(Names.named("b")).to("B");
              }
            });

    Binding<Map<Integer, String>> binding = injector.getBinding(new Key<Map<Integer, String>>() {});
    HasDependencies withDependencies = (HasDependencies) binding;
    Set<Dependency<?>> actualDependencies = withDependencies.getDependencies();

    // We expect two dependencies, because the dependencies are annotated with
    // Element, which has a uniqueId, it's difficult to directly compare them.
    // Instead we will manually compare all the fields except the uniqueId
    assertEquals(2, actualDependencies.size());
    for (Dependency<?> dependency : actualDependencies) {
      Key<?> key = dependency.getKey();
      assertEquals(new TypeLiteral<String>() {}, key.getTypeLiteral());
      Annotation annotation = dependency.getKey().getAnnotation();
      assertTrue(annotation instanceof Element);
      Element element = (Element) annotation;
      assertEquals("", element.setName());
      assertEquals(Element.Type.MAPBINDER, element.type());
      assertEquals("java.lang.Integer", element.keyType());
    }

    Set<String> elements = Sets.newHashSet();
    elements.addAll(recurseForDependencies(injector, withDependencies));
    assertEquals(ImmutableSet.of("A", "B"), elements);
  }

