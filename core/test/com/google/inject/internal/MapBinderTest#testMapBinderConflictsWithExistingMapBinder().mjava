  /**
   * This is the same as the previous test, but it gets at the conflicting set through a MapBinder
   * rather than through a regular binding. It's unlikely that application developers would do this
   * in practice, but if they do we want to make sure it is detected and fails fast.
   */
  public void testMapBinderConflictsWithExistingMapBinder() {
    Module module =
        new AbstractModule() {
          @Override
          protected void configure() {
            MapBinder<Integer, String> mapBinder =
                MapBinder.newMapBinder(binder(), Integer.class, String.class);
            mapBinder.addBinding(1).toInstance("1");
            mapBinder.addBinding(2).toInstance("2");

            // Cast TypeLiteral<? extends String> to TypeLiteral<String> so the test can add
            // bindings below (i.e. it would be an error to add bindings if the MapBinder were an
            // MapBinder<Integer, ? extends String>).
            @SuppressWarnings("unchecked") // see above comment
            TypeLiteral<String> valueType =
                (TypeLiteral<String>) TypeLiteral.get(Types.subtypeOf(String.class));
            MapBinder<Integer, String> mapBinder2 =
                MapBinder.newMapBinder(binder(), TypeLiteral.get(Integer.class), valueType);
            mapBinder2.addBinding(1).toInstance("1");
            mapBinder2.addBinding(2).toInstance("2");
          }
        };
    try {
      Guice.createInjector(module);
      fail();
    } catch (CreationException e) {
      assertTrue(
          e.getMessage()
              .contains(
                  "A binding to java.util.Map<java.lang.Integer, ? extends java.lang.String> was"
                      + " already configured"));
    }
  }

