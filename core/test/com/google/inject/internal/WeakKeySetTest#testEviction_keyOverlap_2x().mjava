  public void testEviction_keyOverlap_2x() {
    TestState state1 = new TestState();
    TestState state2 = new TestState();
    Key<Integer> key1 = Key.get(Integer.class);
    Key<Integer> key2 = Key.get(Integer.class);
    Object source1 = new Object();
    Object source2 = new Object();

    set.add(key1, state1, source1);
    assertTrue(set.contains(key1));
    assertEquals(1, set.getSources(key1).size());
    assertTrue(set.getSources(key1).contains(source1));

    set.add(key2, state2, source2);
    assertTrue(set.contains(key2));
    assertEquals(2, set.getSources(key2).size());
    assertTrue(set.getSources(key2).containsAll(Arrays.asList(source1, source2)));

    WeakReference<Key<Integer>> weakKey1Ref = new WeakReference<Key<Integer>>(key1);
    WeakReference<Key<Integer>> weakKey2Ref = new WeakReference<Key<Integer>>(key2);
    WeakReference<Object> weakSource1Ref = new WeakReference<Object>(source1);
    WeakReference<Object> weakSource2Ref = new WeakReference<Object>(source2);

    Key<Integer> key = key1 = key2 = Key.get(Integer.class);
    state1 = null;

    GcFinalization.awaitFullGc();

    assertTrue(set.contains(key));
    assertEquals(1, set.getSources(key).size());
    assertTrue(set.getSources(key).contains(source2));
    assertFalse(set.getSources(key).contains(source1));

    source1 = source2 = null;
    
    GcFinalization.awaitClear(weakSource1Ref);
    // Key1 will be referenced as the key in the sources backingSet and won't be
    // GC'd.
    
    // Should not be GC'd until state2 goes away.
    assertNotNull(weakSource2Ref.get());

    state2 = null;

    GcFinalization.awaitFullGc();

    assertFalse(set.contains(key));
    assertNull(set.getSources(key));

    GcFinalization.awaitClear(weakKey2Ref);
    GcFinalization.awaitClear(weakSource2Ref);
    // Now that the backing set is emptied, key1 is released.
    GcFinalization.awaitClear(weakKey1Ref);
  }

