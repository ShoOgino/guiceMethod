  /**
   * This is the same as the previous test, but it gets at the conflicting set through a multibinder
   * rather than through a regular binding. It's unlikely that application developers would do this
   * in practice, but if they do we want to make sure it is detected and fails fast.
   */
  public void testMultibinderConflictsWithExistingMultibinder() {
    Module module =
        new AbstractModule() {
          @Override
          protected void configure() {
            Multibinder<String> multibinder = Multibinder.newSetBinder(binder(), String.class);
            multibinder.addBinding().toInstance("a");
            multibinder.addBinding().toInstance("b");
            multibinder.addBinding().toInstance("c");

            Multibinder<String> multibinder2 =
                Multibinder.newSetBinder(
                    binder(), (TypeLiteral<String>) TypeLiteral.get(Types.subtypeOf(String.class)));
            multibinder2.addBinding().toInstance("d");
            multibinder2.addBinding().toInstance("e");
          }
        };

    try {
      Guice.createInjector(module);
      fail();
    } catch (CreationException e) {
      assertTrue(
          e.getMessage()
              .contains(
                  "A binding to java.util.Set<? extends java.lang.String> was already configured"));
    }
  }

