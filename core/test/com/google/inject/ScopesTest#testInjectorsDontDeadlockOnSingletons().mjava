  /**
   * Tests that different injectors should not affect each other.
   *
   * <p>This creates a second thread to work in parallel, to create two instances of
   * {@link S} as the same time. If the lock if not granular enough (i.e. JVM-wide)
   * then they would block each other creating a deadlock and await timeout.
   */

  public void testInjectorsDontDeadlockOnSingletons() throws Exception {
    final Provider<S> provider = new SBarrierProvider(2);
    final Injector injector = Guice.createInjector(new AbstractModule() {
      @Override
      protected void configure() {
        Thread.currentThread().setName("S.class[1]");
        bind(S.class).toProvider(provider).in(Scopes.SINGLETON);
      }
    });
    final Injector secondInjector = Guice.createInjector(new AbstractModule() {
      @Override
      protected void configure() {
        Thread.currentThread().setName("S.class[2]");
        bind(S.class).toProvider(provider).in(Scopes.SINGLETON);
      }
    });

    Future<S> secondThreadResult =
        Executors.newSingleThreadExecutor()
            .submit(
                new Callable<S>() {
                  @Override
                  public S call() {
                    return secondInjector.getInstance(S.class);
                  }
                });

    S firstS = injector.getInstance(S.class);
    S secondS = secondThreadResult.get();

    assertNotSame(firstS, secondS);
  }

