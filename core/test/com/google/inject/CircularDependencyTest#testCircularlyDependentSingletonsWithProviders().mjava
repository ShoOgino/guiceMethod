  public void testCircularlyDependentSingletonsWithProviders() {
    Injector injector = Guice.createInjector(new AbstractModule() {
      protected void configure() {
        bind(Chicken.class).in(Singleton.class);
      }

      @Provides @Singleton Egg provideEgg(Chicken chicken) {
        Egg egg = new Egg();
        egg.source = chicken;
        return egg;
      }
    });

    try {
      injector.getInstance(Egg.class);
      fail();
    } catch (ProvisionException e) {
      assertContains(e.getMessage(),
          "Provider was reentrant while creating a singleton",
          " at " + CircularDependencyTest.class.getName(), "provideEgg(",
          " while locating " + Egg.class.getName());
    }
  }

