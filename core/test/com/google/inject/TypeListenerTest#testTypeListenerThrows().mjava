  @Test
  public void testTypeListenerThrows() {
    try {
      Guice.createInjector(new OuterThrowsModule());
      fail();
    } catch (CreationException expected) {
      assertContains(
          expected.getMessage(),
          "1) Error notifying TypeListener clumsy (bound at " + getClass().getName(),
          getDeclaringSourcePart(getClass()),
          asModuleChain(OuterThrowsModule.class, InnerThrowsModule.class),
          "of " + B.class.getName(),
          "Reason: java.lang.ClassCastException: whoops, failure #1",
          "2) Error notifying TypeListener clumsy (bound at " + getClass().getName(),
          getDeclaringSourcePart(getClass()),
          asModuleChain(OuterThrowsModule.class, InnerThrowsModule.class),
          "of " + C.class.getName(),
          "Reason: java.lang.ClassCastException: whoops, failure #2");
    }

    Injector injector =
        Guice.createInjector(
            new AbstractModule() {
              @Override
              protected void configure() {
                bindListener(onlyAbcd, failingTypeListener);
              }
            });
    try {
      injector.getProvider(B.class);
      fail();
    } catch (ConfigurationException expected) {
      assertContains(
          expected.getMessage(),
          "1) Error notifying TypeListener clumsy (bound at " + getClass().getName(),
          getDeclaringSourcePart(getClass()),
          "of " + B.class.getName(),
          "Reason: java.lang.ClassCastException: whoops, failure #3");
    }

    // getting it again should yield the same exception #3
    try {
      injector.getInstance(B.class);
      fail();
    } catch (ConfigurationException expected) {
      assertContains(
          expected.getMessage(),
          "1) Error notifying TypeListener clumsy (bound at " + getClass().getName(),
          getDeclaringSourcePart(getClass()),
          "of " + B.class.getName(),
          "Reason: java.lang.ClassCastException: whoops, failure #3");
    }

    // non-injected types do not participate
    assertSame(Stage.DEVELOPMENT, injector.getInstance(Stage.class));
  }

