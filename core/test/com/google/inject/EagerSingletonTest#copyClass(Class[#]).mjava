  /** Creates a copy of a class in a child classloader. */
  private static Class<?> copyClass(final Class<?> cls) {
    // To create a copy of a class we create a new child class loader with the same data as our
    // parent and override loadClass to always load a new copy of cls.
    try {
      return new URLClassLoader(getClassPathUrls(), EagerSingletonTest.class.getClassLoader()) {
        @Override
        public Class<?> loadClass(String name) throws ClassNotFoundException {
          // This means for every class besides cls we delegate to our parent (so things like
          // @Singleton and Object are well defined), but for this one class we load a new one in
          // this loader.
          if (name.equals(cls.getName())) {
            Class<?> c = findLoadedClass(name);
            if (c == null) {
              return super.findClass(name);
            }
            return c;
          }
          return super.loadClass(name);
        }
      }.loadClass(cls.getName());
    } catch (ClassNotFoundException cnfe) {
      throw new AssertionError(cnfe);
    }
  }

