  public void testNewPrivateBinder() {
    final Key<Collection<Object>> collection =
        new Key<Collection<Object>>(SampleAnnotation.class) {};
    final Key<ArrayList<Object>> arrayList = new Key<ArrayList<Object>>() {};
    final ImmutableSet<Key<?>> collections = ImmutableSet.of(arrayList, collection);

    final Key<?> a = Key.get(String.class, Names.named("a"));
    final Key<?> b = Key.get(String.class, Names.named("b"));
    final ImmutableSet<Key<?>> ab = ImmutableSet.of(a, b);

    checkModule(
        new AbstractModule() {
          @Override
          protected void configure() {
            PrivateBinder one = binder().newPrivateBinder();
            one.expose(arrayList);
            one.expose(collection);
            one.bind(new Key<List<Object>>() {}).to(arrayList);

            PrivateBinder two =
                binder().withSource("1 FooBar").newPrivateBinder().withSource("2 FooBar");
            two.expose(String.class).annotatedWith(Names.named("a"));
            two.expose(b);
            two.bind(new Key<List<Object>>() {}).to(arrayList);
          }
        },
        new FailingElementVisitor() {
          @Override
          public Void visit(PrivateElements one) {
            assertEquals(collections, one.getExposedKeys());
            checkElements(
                one.getElements(),
                new FailingElementVisitor() {
                  @Override
                  public <T> Void visit(Binding<T> binding) {
                    assertEquals(new Key<List<Object>>() {}, binding.getKey());
                    return null;
                  }
                });
            return null;
          }
        },
        new ExternalFailureVisitor() {
          @Override
          public Void visit(PrivateElements two) {
            assertEquals(ab, two.getExposedKeys());
            assertEquals("1 FooBar", two.getSource().toString());
            checkElements(
                two.getElements(),
                new ExternalFailureVisitor() {
                  @Override
                  public <T> Void visit(Binding<T> binding) {
                    assertEquals("2 FooBar", binding.getSource().toString());
                    assertEquals(new Key<List<Object>>() {}, binding.getKey());
                    return null;
                  }
                });
            return null;
          }
        });
  }

