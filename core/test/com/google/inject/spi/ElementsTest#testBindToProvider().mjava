  public void testBindToProvider() {
    final Provider<String> aProvider =
        new Provider<String>() {
          @Override
          public String get() {
            return "A";
          }
        };

    final javax.inject.Provider<Integer> intJavaxProvider =
        new javax.inject.Provider<Integer>() {
          @Override
          public Integer get() {
            return 42;
          }
        };

    final javax.inject.Provider<Double> doubleJavaxProvider =
        new javax.inject.Provider<Double>() {
          @javax.inject.Inject String string;

          @Override
          public Double get() {
            return 42.42;
          }
        };

    checkModule(
        new AbstractModule() {
          @Override
          protected void configure() {
            bind(String.class).toProvider(aProvider);
            bind(Integer.class).toProvider(intJavaxProvider);
            bind(Double.class).toProvider(doubleJavaxProvider);
            bind(List.class).toProvider(ListProvider.class);
            bind(Collection.class).toProvider(Key.get(ListProvider.class));
            bind(Iterable.class).toProvider(new TypeLiteral<TProvider<List<Object>>>() {});
          }
        },
        new FailingElementVisitor() {
          @Override
          public <T> Void visit(Binding<T> command) {
            assertTrue(command instanceof ProviderInstanceBinding);
            assertEquals(Key.get(String.class), command.getKey());
            command.acceptTargetVisitor(
                new FailingTargetVisitor<T>() {
                  @Override
                  public Void visit(ProviderInstanceBinding<? extends T> binding) {
                    assertSame(aProvider, binding.getUserSuppliedProvider());
                    assertSame(aProvider, binding.getProviderInstance());
                    return null;
                  }
                });
            return null;
          }
        },
        new FailingElementVisitor() {
          @Override
          public <T> Void visit(Binding<T> command) {
            assertTrue(command instanceof ProviderInstanceBinding);
            assertEquals(Key.get(Integer.class), command.getKey());
            command.acceptTargetVisitor(
                new FailingTargetVisitor<T>() {
                  @Override
                  public Void visit(ProviderInstanceBinding<? extends T> binding) {
                    assertSame(intJavaxProvider, binding.getUserSuppliedProvider());
                    assertEquals(42, binding.getProviderInstance().get());
                    // we don't wrap this w/ dependencies if there were none.
                    assertFalse(binding.getProviderInstance() instanceof HasDependencies);
                    return null;
                  }
                });
            return null;
          }
        },
        new FailingElementVisitor() {
          @Override
          public <T> Void visit(Binding<T> command) {
            assertTrue(command instanceof ProviderInstanceBinding);
            assertEquals(Key.get(Double.class), command.getKey());
            command.acceptTargetVisitor(
                new FailingTargetVisitor<T>() {
                  @Override
                  public Void visit(ProviderInstanceBinding<? extends T> binding) {
                    assertSame(doubleJavaxProvider, binding.getUserSuppliedProvider());
                    assertEquals(42.42, binding.getProviderInstance().get());
                    // we do wrap it with dependencies if there were some.
                    assertTrue(binding.getProviderInstance() instanceof HasDependencies);
                    Set<Dependency<?>> deps =
                        ((HasDependencies) binding.getProviderInstance()).getDependencies();
                    assertEquals(1, deps.size());
                    assertEquals(
                        String.class,
                        deps.iterator().next().getKey().getTypeLiteral().getRawType());
                    return null;
                  }
                });
            return null;
          }
        },
        new FailingElementVisitor() {
          @Override
          public <T> Void visit(Binding<T> command) {
            assertTrue(command instanceof ProviderKeyBinding);
            assertEquals(Key.get(List.class), command.getKey());
            command.acceptTargetVisitor(
                new FailingTargetVisitor<T>() {
                  @Override
                  public Void visit(ProviderKeyBinding<? extends T> binding) {
                    assertEquals(Key.get(ListProvider.class), binding.getProviderKey());
                    return null;
                  }
                });
            return null;
          }
        },
        new FailingElementVisitor() {
          @Override
          public <T> Void visit(Binding<T> command) {
            assertTrue(command instanceof ProviderKeyBinding);
            assertEquals(Key.get(Collection.class), command.getKey());
            command.acceptTargetVisitor(
                new FailingTargetVisitor<T>() {
                  @Override
                  public Void visit(ProviderKeyBinding<? extends T> binding) {
                    assertEquals(Key.get(ListProvider.class), binding.getProviderKey());
                    return null;
                  }
                });
            return null;
          }
        },
        new FailingElementVisitor() {
          @Override
          public <T> Void visit(Binding<T> command) {
            assertTrue(command instanceof ProviderKeyBinding);
            assertEquals(Key.get(Iterable.class), command.getKey());
            command.acceptTargetVisitor(
                new FailingTargetVisitor<T>() {
                  @Override
                  public Void visit(ProviderKeyBinding<? extends T> binding) {
                    assertEquals(new Key<TProvider<List<Object>>>() {}, binding.getProviderKey());
                    return null;
                  }
                });
            return null;
          }
        });
  }

