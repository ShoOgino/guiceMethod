  @Test
  public void testModuleBindings() throws Exception {
    Module module =
        new AbstractModule() {

          @Provides
          Integer fail() {
            return 1;
          }
        };
    // sanity check that the injector works
    Injector injector = Guice.createInjector(module);
    assertEquals(1, injector.getInstance(Integer.class).intValue());
    ProviderInstanceBinding<Integer> injectorBinding =
        (ProviderInstanceBinding<Integer>) injector.getBinding(Integer.class);
    assertEquals(1, injectorBinding.getUserSuppliedProvider().get().intValue());

    ProviderInstanceBinding<?> moduleBinding =
        (ProviderInstanceBinding<?>) Iterables.getOnlyElement(Elements.getElements(module));
    try {
      moduleBinding.getUserSuppliedProvider().get();
      fail();
    } catch (IllegalStateException ise) {
      assertEquals(
          "This Provider cannot be used until the Injector has been created.", ise.getMessage());
    }
  }

