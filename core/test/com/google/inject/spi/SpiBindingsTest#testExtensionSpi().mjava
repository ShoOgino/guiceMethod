  public void testExtensionSpi() {
    final AtomicBoolean visiting = new AtomicBoolean(false);
    
    final Injector injector =
        Guice.createInjector(
            new AbstractModule() {
              @Override
              protected void configure() {
                bind(String.class)
                    .toProvider(
                        new ProviderWithExtensionVisitor<String>() {
                          @Override
                          public <B, V> V acceptExtensionVisitor(
                              BindingTargetVisitor<B, V> visitor,
                              ProviderInstanceBinding<? extends B> binding) {
                            assertSame(this, binding.getUserSuppliedProvider());
                            // We can't always check for FailingSpiTargetVisitor,
                            // because constructing the injector visits here, and we need
                            // to process the binding as normal
                            if (visiting.get()) {
                              assertTrue(
                                  "visitor: " + visitor,
                                  visitor instanceof FailingSpiTargetVisitor);
                              return (V) "visited";
                            } else {
                              return visitor.visit(binding);
                            }
                          }

                          @Override
                          public String get() {
                            return "FooBar";
                          }
                        });
              }
            });
    
    visiting.set(true);

    // Check for Provider<String> binding -- that is still a ProviderBinding.
    Key<Provider<String>> providerOfStringKey = new Key<Provider<String>>() {};
    Binding<Provider<String>> providerBinding = injector.getBinding(providerOfStringKey);
    assertEquals(providerOfStringKey, providerBinding.getKey());
    checkBindingSource(providerBinding);
    assertTrue("binding: " + providerBinding, providerBinding instanceof ProviderBinding);
    providerBinding.acceptTargetVisitor(new FailingTargetVisitor<Provider<String>>() {
      @Override public Void visit(ProviderBinding<? extends Provider<String>> binding) {
        assertEquals(Key.get(String.class), binding.getProvidedKey());
        return null;
      }
    });
    
    // Check for String binding -- that one is ProviderInstanceBinding, and gets hooked
    Binding<String> binding = injector.getBinding(String.class);
    assertEquals(Key.get(String.class), binding.getKey());
    checkBindingSource(binding);
    assertTrue(binding instanceof ProviderInstanceBinding);
    assertEquals("visited", binding.acceptTargetVisitor(new FailingSpiTargetVisitor<String>()));
  }

