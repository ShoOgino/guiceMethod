  public void testNonModuleProviderMethods() {
    final Object methodsObject =
        new Object() {
          @Provides
          @Named("foo")
          String provideFoo() {
            return "foo-value";
          }
        };

    Module module =
        new AbstractModule() {
          @Override
          protected void configure() {
            install(ProviderMethodsModule.forObject(methodsObject));
          }
        };

    Injector injector = Guice.createInjector(module);

    Key<String> key = Key.get(String.class, Names.named("foo"));
    assertEquals("foo-value", injector.getInstance(key));

    // Test the provider method object itself. This makes sure getInstance works, since GIN uses it
    List<Element> elements = Elements.getElements(module);
    assertEquals(1, elements.size());

    Element element = elements.get(0);
    assertTrue(
        element + " instanceof ProviderInstanceBinding",
        element instanceof ProviderInstanceBinding);

    ProviderInstanceBinding<?> binding = (ProviderInstanceBinding<?>) element;
    javax.inject.Provider<?> provider = binding.getUserSuppliedProvider();
    assertTrue(provider instanceof ProviderMethod);
    assertEquals(methodsObject, ((ProviderMethod) provider).getInstance());
    assertSame(provider, binding.getProviderInstance());
  }

