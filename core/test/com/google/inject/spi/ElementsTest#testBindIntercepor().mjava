  /*if[AOP]*/
  public void testBindIntercepor() {
    @SuppressWarnings("rawtypes") // Unavoidable since subclassesOf returns raw type
    final Matcher<Class> classMatcher = Matchers.subclassesOf(List.class);
    final Matcher<Object> methodMatcher = Matchers.any();
    final MethodInterceptor methodInterceptor =
        new MethodInterceptor() {
          @Override
          public Object invoke(MethodInvocation methodInvocation) {
            return null;
          }
        };

    checkModule(
        new AbstractModule() {
          @Override
          protected void configure() {
            bindInterceptor(classMatcher, methodMatcher, methodInterceptor);
          }
        },
        new FailingElementVisitor() {
          @Override
          public Void visit(InterceptorBinding command) {
            assertSame(classMatcher, command.getClassMatcher());
            assertSame(methodMatcher, command.getMethodMatcher());
            assertEquals(Arrays.asList(methodInterceptor), command.getInterceptors());
            return null;
          }
        });
  }
  /*end[AOP]*/

