  public void testAbstractMethodsAreScannedForOverrides() {
    abstract class Superclass {
      @TestProvides
      abstract boolean abstractTest();
    }

    abstract class Subclass extends Superclass {
      @TestProvides
      @Override
      abstract boolean abstractTest();
    }

    ModuleAnnotatedMethodScanner testScanner =
        new ModuleAnnotatedMethodScanner() {
          @Override
          public Set<? extends Class<? extends Annotation>> annotationClasses() {
            return ImmutableSet.of(TestProvides.class);
          }

          @Override
          public <T> Key<T> prepareMethod(
              Binder binder, Annotation annotation, Key<T> key, InjectionPoint injectionPoint) {
            return null;
          }
        };
    try {
      Guice.createInjector(ProviderMethodsModule.forModule(Subclass.class, testScanner));
      fail("expected exception not thrown");
    } catch (CreationException e) {
      assertContains(
          e.getMessage(),
          String.format(
              "Overriding @%s methods is not allowed", TestProvides.class.getCanonicalName()));
    }
  }

