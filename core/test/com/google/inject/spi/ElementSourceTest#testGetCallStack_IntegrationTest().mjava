  public void testGetCallStack_IntegrationTest() throws Exception {
    List<Element> elements = Elements.getElements(new A());
    for (Element element : elements) {
      if (element instanceof Binding) {
        Binding<?> binding = (Binding<?>) element;
        Class<? extends Annotation> annotationType = binding.getKey().getAnnotationType();
        if (annotationType != null && annotationType.equals(SampleAnnotation.class)) {
          ElementSource elementSource = (ElementSource) binding.getSource();
          List<String> moduleClassNames = elementSource.getModuleClassNames();
          // Check module class names
          // Module C
          assertEquals("com.google.inject.spi.ElementSourceTest$C", moduleClassNames.get(0));
          // Module B
          assertEquals("com.google.inject.spi.ElementSourceTest$B", moduleClassNames.get(1));
          // Module A
          assertEquals("com.google.inject.spi.ElementSourceTest$A", moduleClassNames.get(2));
          StackTraceElement[] callStack = elementSource.getStackTrace();
          switch (getIncludeStackTraceOption()) {
            case OFF:
              // Check declaring source
              StackTraceElement stackTraceElement =
                  (StackTraceElement) elementSource.getDeclaringSource();
              assertEquals(
                  new StackTraceElement(
                      "com.google.inject.spi.ElementSourceTest$C", "configure", null, -1),
                  stackTraceElement);
              // Check call stack
              assertEquals(0, callStack.length);
              return;
            case ONLY_FOR_DECLARING_SOURCE:
              // Check call stack
              assertEquals(0, callStack.length);
              return;
            case COMPLETE:
              // Check call stack
              int skippedCallStackSize = new Throwable().getStackTrace().length - 1;
              assertEquals(skippedCallStackSize + 15, elementSource.getStackTrace().length);
              assertEquals(
                  "com.google.inject.spi.Elements$RecordingBinder", callStack[0].getClassName());
              assertEquals(
                  "com.google.inject.spi.Elements$RecordingBinder", callStack[1].getClassName());
              assertEquals("com.google.inject.AbstractModule", callStack[2].getClassName());
              // Module C
              assertEquals(
                  "com.google.inject.spi.ElementSourceTest$C", callStack[3].getClassName());
              assertEquals("configure", callStack[3].getMethodName());
              assertEquals("Unknown Source", callStack[3].getFileName());
              assertEquals("com.google.inject.AbstractModule", callStack[4].getClassName());
              assertEquals(
                  "com.google.inject.spi.Elements$RecordingBinder", callStack[5].getClassName());
              // Module B
              assertEquals(
                  "com.google.inject.spi.ElementSourceTest$B", callStack[6].getClassName());
              assertEquals(
                  "com.google.inject.spi.Elements$RecordingBinder", callStack[7].getClassName());
              // Module A
              assertEquals("com.google.inject.AbstractModule", callStack[8].getClassName());
              assertEquals(
                  "com.google.inject.spi.ElementSourceTest$A", callStack[9].getClassName());
              assertEquals("com.google.inject.AbstractModule", callStack[10].getClassName());
              assertEquals(
                  "com.google.inject.spi.Elements$RecordingBinder", callStack[11].getClassName());
              assertEquals("com.google.inject.spi.Elements", callStack[12].getClassName());
              assertEquals("com.google.inject.spi.Elements", callStack[13].getClassName());
              assertEquals("com.google.inject.spi.ElementSourceTest", callStack[14].getClassName());
              // Check modules index
              List<Integer> indexes = elementSource.getModuleConfigurePositionsInStackTrace();
              assertEquals((int) indexes.get(0), 4);
              assertEquals((int) indexes.get(1), 6);
              assertEquals((int) indexes.get(2), 10);
              return;
          }
        }
      }
    }
    fail("The test should not reach this line.");
  }

