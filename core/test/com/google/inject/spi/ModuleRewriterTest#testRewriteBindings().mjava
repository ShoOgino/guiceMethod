  public void testRewriteBindings() {
    // create a module the binds String.class and CharSequence.class
    Module module =
        new AbstractModule() {
          @Override
          protected void configure() {
            bind(String.class).toInstance("Pizza");
            bind(CharSequence.class).toInstance("Wine");
          }
        };

    // record the elements from that module
    List<Element> elements = Elements.getElements(module);

    // create a rewriter that rewrites the binding to 'Wine' with a binding to 'Beer'
    List<Element> rewritten = Lists.newArrayList();
    for (Element element : elements) {
      element =
          element.acceptVisitor(
              new DefaultElementVisitor<Element>() {
                @Override
                public <T> Element visit(Binding<T> binding) {
                  T target = binding.acceptTargetVisitor(Elements.<T>getInstanceVisitor());
                  if ("Wine".equals(target)) {
                    return null;
                  } else {
                    return binding;
                  }
                }
              });
      if (element != null) {
        rewritten.add(element);
      }
    }

    // create a module from the original list of elements and the rewriter
    Module rewrittenModule = Elements.getModule(rewritten);

    // the wine binding is dropped
    Injector injector = Guice.createInjector(rewrittenModule);
    try {
      injector.getInstance(CharSequence.class);
      fail();
    } catch (ConfigurationException expected) {
    }
  }

