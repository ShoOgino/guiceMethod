  public void testSharedProxyClasses() {
    Injector injector =
        Guice.createInjector(
            new AbstractModule() {
              @Override
              protected void configure() {
                bindInterceptor(
                    Matchers.any(), Matchers.returns(only(Foo.class)), new ReturnNullInterceptor());
              }
            });

    Injector childOne =
        injector.createChildInjector(
            new AbstractModule() {
              @Override
              protected void configure() {
                bind(Interceptable.class);
              }
            });

    Interceptable nullFoosOne = childOne.getInstance(Interceptable.class);
    assertNotNull(nullFoosOne.bar());
    assertNull(nullFoosOne.foo()); // confirm it's being intercepted

    Injector childTwo =
        injector.createChildInjector(
            new AbstractModule() {
              @Override
              protected void configure() {
                bind(Interceptable.class);
              }
            });

    Interceptable nullFoosTwo = childTwo.getInstance(Interceptable.class);
    assertNull(nullFoosTwo.foo()); // confirm it's being intercepted

    assertSame(
        "Child injectors should share proxy classes, otherwise memory leaks!",
        nullFoosOne.getClass(),
        nullFoosTwo.getClass());

    Injector injector2 =
        Guice.createInjector(
            new AbstractModule() {
              @Override
              protected void configure() {
                bindInterceptor(
                    Matchers.any(), Matchers.returns(only(Foo.class)), new ReturnNullInterceptor());
              }
            });
    Interceptable separateNullFoos = injector2.getInstance(Interceptable.class);
    assertNull(separateNullFoos.foo()); // confirm it's being intercepted
    assertSame(
        "different injectors should share proxy classes, otherwise memory leaks!",
        nullFoosOne.getClass(),
        separateNullFoos.getClass());
  }

