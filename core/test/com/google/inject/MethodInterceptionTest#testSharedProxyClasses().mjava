  public void testSharedProxyClasses() {
    Injector injector = Guice.createInjector(new AbstractModule() {
      protected void configure() {
        bindInterceptor(Matchers.any(), Matchers.returns(only(Foo.class)),
            new ReturnNullInterceptor());
      }
    });

    Injector nullFoosInjector = injector.createChildInjector(new AbstractModule() {
      protected void configure() {
        bind(Interceptable.class);
      }
    });

    Interceptable nullFoos = nullFoosInjector.getInstance(Interceptable.class);
    assertNotNull(nullFoos.bar());
    assertNull(nullFoos.foo());

    Injector nullFoosAndBarsInjector = injector.createChildInjector(new AbstractModule() {
      protected void configure() {
        bind(Interceptable.class);
        bindInterceptor(Matchers.any(), Matchers.returns(only(Bar.class)),
            new ReturnNullInterceptor());
      }
    });

    Interceptable bothNull = nullFoosAndBarsInjector.getInstance(Interceptable.class);
    assertNull(bothNull.bar());
    assertNull(bothNull.foo());

    assertSame("Child injectors should share proxy classes, otherwise memory leaks!",
        nullFoos.getClass(), bothNull.getClass());
  }

