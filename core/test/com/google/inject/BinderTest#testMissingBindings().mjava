  public void testMissingBindings() {
    try {
      Guice.createInjector(new AbstractModule() {
        @Override
        public void configure() {
          getProvider(Runnable.class);
          bind(Comparator.class);
          requireBinding(Key.get(new TypeLiteral<Callable<String>>() {}));
          bind(Date.class).annotatedWith(Names.named("date"));
        }
      });
    } catch (CreationException e) {
      assertEquals(4, e.getErrorMessages().size());
      String segment1 = "No implementation for " + Comparator.class.getName() + " was bound.";
      String segment2 = "No implementation for java.util.Date annotated with @"
          + Named.class.getName() + "(value=date) was bound.";
      String segment3 = "No implementation for java.lang.Runnable was bound.";
      String segment4 = " No implementation for java.util.concurrent.Callable<java.lang.String> was"
          + " bound.";
      String atSegment = "at " + getClass().getName();
      String sourceFileName = getDeclaringSourcePart(getClass());
      if (isIncludeStackTraceOff()) {
        assertContains(e.getMessage(),
            segment1, atSegment, sourceFileName,
            segment2, atSegment, sourceFileName,
            segment3, atSegment, sourceFileName,
            segment4, atSegment, sourceFileName);
      } else {
        assertContains(e.getMessage(),
            segment3, atSegment, sourceFileName,
            segment1, atSegment, sourceFileName,
            segment4, atSegment, sourceFileName,
            segment2, atSegment, sourceFileName);
      } 
    }
  }

