  public void testMissingBindings() {
    try {
      Guice.createInjector(
          // We put each binding in a separate module so the order of the error messages doesn't
          // depend on line numbers
          new AbstractModule() {
            @Override
            public void configure() {
              getProvider(Runnable.class);
            }
          },
          new AbstractModule() {
            @Override
            public void configure() {
              bind(Comparator.class);
            }
          },
          new AbstractModule() {
            @Override
            public void configure() {
              requireBinding(Key.get(new TypeLiteral<Callable<String>>() {}));
            }
          },
          new AbstractModule() {
            @Override
            public void configure() {
              bind(Date.class).annotatedWith(Names.named("date"));
            }
          });
      fail("Expected CreationException");
    } catch (CreationException e) {
      assertEquals(4, e.getErrorMessages().size());
      String segment1 = "No implementation for java.lang.Runnable was bound.";
      String segment2 = "No implementation for " + Comparator.class.getName() + " was bound.";
      String segment3 = "No implementation for java.util.concurrent.Callable<java.lang.String> was"
          + " bound.";
      String segment4 = "No implementation for java.util.Date annotated with @"
          + Named.class.getName() + "(value=date) was bound.";
      String atSegment = "at " + getClass().getName();
      String sourceFileName = getDeclaringSourcePart(getClass());
      assertContains(e.getMessage(),
          segment1, atSegment, sourceFileName,
          segment2, atSegment, sourceFileName,
          segment3, atSegment, sourceFileName,
          segment4, atSegment, sourceFileName);
    }
  }

