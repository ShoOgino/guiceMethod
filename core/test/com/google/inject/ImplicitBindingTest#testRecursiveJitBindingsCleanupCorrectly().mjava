  /**
   * Ensure that when we cleanup failed JIT bindings, we don't break. The test here requires a
   * sequence of JIT bindings:
   *
   * <ol>
   * <li> A-> B
   * <li> B -> C, A
   * <li> C -> A, D
   * <li> D not JITable
   * </ol>
   *
   * <p>The problem was that C cleaned up A's binding and then handed control back to B, which tried
   * to continue processing A.. but A was removed from the jitBindings Map, so it attempts to create
   * a new JIT binding for A, but we haven't yet finished constructing the first JIT binding for A,
   * so we get a recursive computation exception from ComputingConcurrentHashMap.
   *
   * <p>We also throw in a valid JIT binding, E, to guarantee that if something fails in this flow,
   * it can be recreated later if it's not from a failed sequence.
   */
  public void testRecursiveJitBindingsCleanupCorrectly() throws Exception {
    Injector injector = Guice.createInjector();
    try {
      injector.getInstance(A.class);
      fail("Expected failure");
    } catch (ConfigurationException expected) {
      Message msg = Iterables.getOnlyElement(expected.getErrorMessages());
      Asserts.assertContains(
          msg.getMessage(),
          "No implementation for "
              + D.class.getName()
              + " (with no qualifier annotation) was bound, and could not find an injectable"
              + " constructor");
    }
    // Assert that we've removed all the bindings.
    assertNull(injector.getExistingBinding(Key.get(A.class)));
    assertNull(injector.getExistingBinding(Key.get(B.class)));
    assertNull(injector.getExistingBinding(Key.get(C.class)));
    assertNull(injector.getExistingBinding(Key.get(D.class)));

    // Confirm that we didn't prevent 'E' from working.
    assertNotNull(injector.getBinding(Key.get(E.class)));
  }

