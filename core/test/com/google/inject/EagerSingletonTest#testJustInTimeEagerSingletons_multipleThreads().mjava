  public void testJustInTimeEagerSingletons_multipleThreads() throws Exception {
    // in order to make the data race more likely we need a lot of jit bindings.  The easiest thing
    // is just to 'copy' out class for B a bunch of times.
    final List<Class<?>> jitBindings = new ArrayList<Class<?>>();
    for (int i = 0; i < 1000; i++) {
      jitBindings.add(copyClass(B.class));
    }
    Guice.createInjector(
        Stage.PRODUCTION,
        new AbstractModule() {
          @Override
          protected void configure() {
            // create a just-in-time binding for A
            getProvider(A.class);

            // create a just-in-time binding for C
            requestInjection(
                new Object() {
                  @Inject
                  void inject(final Injector injector) throws Exception {
                    final CountDownLatch latch = new CountDownLatch(1);
                    new Thread() {
                      @Override
                      public void run() {
                        latch.countDown();
                        for (Class<?> jitBinding : jitBindings) {
                          // this causes the binding to be created
                          injector.getProvider(jitBinding);
                        }
                      }
                    }.start();
                    latch.await(); // make sure the thread is running before returning
                  }
                });
          }
        });

    assertEquals(1, A.instanceCount);
    // our thread runs in parallel with eager singleton loading so some there should be some number
    // N such that 0<=N <jitBindings.size() and all classes in jitBindings with an index < N will
    // have been initialized.  Assert that!
    int prev = -1;
    int index = 0;
    for (Class<?> jitBinding : jitBindings) {
      int instanceCount = (Integer) jitBinding.getDeclaredField("instanceCount").get(null);
      if (instanceCount != 0 && instanceCount != 1) {
        fail("Should only have created zero or one instances, got " + instanceCount);
      }
      if (prev == -1) {
        prev = instanceCount;
      } else if (prev != instanceCount) {
        if (prev != 1 && instanceCount != 0) {
          fail("initialized later JIT bindings before earlier ones at index " + index);
        }
        prev = instanceCount;
      }
      index++;
    }
  }

