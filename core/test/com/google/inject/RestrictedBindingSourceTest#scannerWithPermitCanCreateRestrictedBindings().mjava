  @Test
  public void scannerWithPermitCanCreateRestrictedBindings() {
    @NetworkLibrary
    class NetworkProvidesScannerWithPermit extends NetworkProvidesScanner {
      @Override
      public <T> Key<T> prepareMethod(
          Binder binder, Annotation annotation, Key<T> key, InjectionPoint injectionPoint) {
        binder.install(
            new AbstractModule() {
              @Provides
              @GatewayIpAdress
              int provideGatewayIp() {
                return 42;
              }
            });
        return Key.get(key.getTypeLiteral(), Network.class);
      }
    }
    AbstractModule moduleWithNetworkProvidesMethod =
        new AbstractModule() {
          @NetworkProvides
          String provideNetworkString() {
            return "lorem ipsum";
          }
        };

    Injector injector =
        Guice.createInjector(
            moduleWithNetworkProvidesMethod, scannerModule(new NetworkProvidesScannerWithPermit()));

    assertThat(injector.getInstance(Key.get(Integer.class, GatewayIpAdress.class))).isEqualTo(42);
  }

