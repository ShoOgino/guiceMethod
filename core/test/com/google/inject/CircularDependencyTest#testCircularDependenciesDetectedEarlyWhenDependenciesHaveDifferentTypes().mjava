  /**
   * Tests that ProviderInternalFactory can detect circular dependencies before it gets to
   * Scopes.SINGLETON. This is especially important because the failure in Scopes.SINGLETON doesn't
   * have enough context to provide a decent error message.
   */
  public void testCircularDependenciesDetectedEarlyWhenDependenciesHaveDifferentTypes() {
    Injector injector =
        Guice.createInjector(
            new AbstractModule() {
              @Override
              protected void configure() {
                bind(Number.class).to(Integer.class);
              }

              @Provides
              @Singleton
              Integer provideInteger(List<Object> list) {
                return 2;
              }

              @Provides
              List<Object> provideList(Integer integer) {
                return new ArrayList<>();
              }
            });
    try {
      injector.getInstance(Number.class);
      fail();
    } catch (ProvisionException expected) {
      assertContains(
          expected.getMessage(),
          "Tried proxying " + Integer.class.getName() + " to support a circular dependency, ",
          "but it is not an interface.");
    }
  }

