  /**
   * Registers an instance for member injection when that step is performed.
   *
   * @param instance an instance that optionally has members to be injected (each annotated with
   *      @Inject).
   * @param binding the binding that caused this initializable to be created, if it exists.
   * @param source the source location that this injection was requested
   */
  <T> Initializable<T> requestInjection(InjectorImpl injector, T instance, Binding<T> binding,
      Object source, Set<InjectionPoint> injectionPoints) {
    checkNotNull(source);

    ProvisionListenerStackCallback<T> provisionCallback =
        binding == null ? null : injector.provisionListenerStore.get(binding);

    // short circuit if the object has no injections or listeners.
    if (instance == null || (injectionPoints.isEmpty()
        && !injector.membersInjectorStore.hasTypeListeners()
        && (provisionCallback == null || !provisionCallback.hasListeners()))) {
      return Initializables.of(instance);
    }

    InjectableReference<T> initializable = new InjectableReference<T>(
        injector, instance, binding == null ? null : binding.getKey(), provisionCallback, source);
    pendingInjection.put(instance, initializable);
    return initializable;
  }

