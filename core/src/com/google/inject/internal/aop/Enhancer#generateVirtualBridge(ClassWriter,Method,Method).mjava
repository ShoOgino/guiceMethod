  /** Override the original bridge method and replace it with virtual dispatch to the target. */
  private void generateVirtualBridge(ClassWriter cw, Method bridge, Method target) {
    MethodVisitor mv =
        cw.visitMethod(
            FINAL | (bridge.getModifiers() & ~(ABSTRACT | NATIVE | SYNCHRONIZED)),
            bridge.getName(),
            Type.getMethodDescriptor(bridge),
            null,
            exceptionNames(bridge));

    mv.visitVarInsn(ALOAD, 0);
    mv.visitTypeInsn(CHECKCAST, checkcastToProxy);

    Class<?>[] bridgeParameterTypes = bridge.getParameterTypes();
    Class<?>[] targetParameterTypes = target.getParameterTypes();

    int slot = 1;
    for (int i = 0, len = targetParameterTypes.length; i < len; i++) {
      Class<?> parameterType = targetParameterTypes[i];
      slot += loadArgument(mv, parameterType, slot);
      if (parameterType != bridgeParameterTypes[i]) {
        // cast incoming argument to the specific type expected by target
        mv.visitTypeInsn(CHECKCAST, Type.getInternalName(parameterType));
      }
    }

    mv.visitMethodInsn(
        INVOKEVIRTUAL, hostName, target.getName(), Type.getMethodDescriptor(target), false);

    Type returnType = Type.getType(bridge.getReturnType());
    if (target.getReturnType() != bridge.getReturnType()) {
      // cast return value to the specific type expected by bridge
      mv.visitTypeInsn(CHECKCAST, returnType.getInternalName());
    }
    mv.visitInsn(returnType.getOpcode(IRETURN));

    mv.visitMaxs(0, 0);
    mv.visitEnd();
  }

