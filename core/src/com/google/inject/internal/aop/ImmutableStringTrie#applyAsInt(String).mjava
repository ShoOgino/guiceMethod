  /**
   * Returns the index assigned in the trie to the given string.
   *
   * <p>Note: a return value of {@code -1} means the string is definitely not in the trie, but a
   * non-negative index may be returned for strings that closely match those in the trie. This is
   * acceptable because we will only call this method with strings that we know exist in the trie.
   */
  @Override
  public int applyAsInt(String key) {
    int keyLength = key.length();

    int keyIndex = 0;
    int dataIndex = 0;
    char[] data = trie;

    while (keyIndex < keyLength) {
      // trie is ordered, so we can use binary search to pick the right branch
      int branchCount = data[dataIndex++];
      int branchIndex =
          binarySearch(data, dataIndex, dataIndex + branchCount, key.charAt(keyIndex));

      if (branchIndex < 0) {
        break; // definitely no match
      }

      int resultIndex = branchIndex + branchCount;
      char result = data[resultIndex];
      if ((result & LEAF_MARKER) != 0) {
        return result & ~LEAF_MARKER;
      }

      // 'buds' are just like leaves unless the key still has characters left
      if ((result & BUD_MARKER) != 0) {
        if (keyIndex == keyLength - 1) {
          return result & ~BUD_MARKER;
        }
        result = 1; // more characters to match, continue search with next character
      }

      // move the key to the next potential decision point
      keyIndex += result;

      // move the data to the appropriate branch...
      if (branchIndex > dataIndex) {
        int jumpIndex = resultIndex + branchCount - 1;
        dataIndex += data[jumpIndex];
      }

      // ...always include moving past the current node
      dataIndex += (branchCount * 3) - 1;
    }

    return -1;
  }

