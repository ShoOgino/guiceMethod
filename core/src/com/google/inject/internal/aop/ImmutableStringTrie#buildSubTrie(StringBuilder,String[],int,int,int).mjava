  /** Recursively builds a trie for a slice of rows at a particular column. */
  private static void buildSubTrie(
      StringBuilder buf, String[] table, int column, int row, int rowLimit) {

    int trieStart = buf.length();

    int prevRow = row;
    int branchCount = 0;
    int nextJump = 0;

    boolean allLeaves = true;

    while (prevRow < rowLimit) {
      String cells = table[prevRow];
      int columnLimit = cells.length();

      char pivot = cells.charAt(column);

      // find the row that marks the start of the next branch, and the end of this one
      int nextRow = nextPivotRow(table, pivot, column, prevRow, rowLimit);

      // find the column along this branch that marks the next decision point/pivot
      int nextColumn = nextPivotColumn(table, column, prevRow, nextRow);

      // adjust pivot point if it would involve adding a bud spanning more than one column
      if (nextColumn == columnLimit && nextColumn - column > 1 && nextRow - prevRow > 1) {
        // move it back so this becomes a jump branch followed immediately by sub-trie bud
        nextColumn--;
      }

      // record the character for this branch
      int branchIndex = trieStart + branchCount;
      buf.insert(branchIndex, pivot);

      int resultIndex = branchIndex + 1 + branchCount;

      // any sub tries will start after the result (to be inserted)
      int subTrieStart = buf.length() + 1;

      if (nextColumn < columnLimit) {
        // record key-delta and process rest of the row as sub trie
        buf.insert(resultIndex, (char) (nextColumn - column));
        buildSubTrie(buf, table, nextColumn, prevRow, nextRow);
        allLeaves = false;
      } else {
        // process rest of next row as sub trie to see if this row ends in a leaf/buf
        buildSubTrie(buf, table, nextColumn, prevRow + 1, nextRow);
        // must be leaf if sub trie doesn't exist, ie. it wasn't added to buffer
        boolean isLeaf = subTrieStart > buf.length();
        char marker = isLeaf ? LEAF_MARKER : BUD_MARKER;
        buf.insert(resultIndex, (char) ((prevRow & (MAX_ROWS_PER_TRIE - 1)) | marker));
        allLeaves = allLeaves && isLeaf;
      }

      if (nextRow < rowLimit) {
        // child sub-tries have been added, so can now calculate jump to next branch
        int jumpIndex = resultIndex + 1 + branchCount;
        nextJump += buf.length() - subTrieStart;
        buf.insert(jumpIndex, (char) nextJump);
      }

      prevRow = nextRow;
      branchCount++;
    }

    if (branchCount > 0) {
      buf.insert(trieStart, (char) branchCount);
      if (allLeaves) {
        // no need for jumps when every branch is a leaf
        int jumpStart = trieStart + 1 + (branchCount * 2);
        buf.delete(jumpStart, jumpStart + branchCount);
      }
    }
  }

