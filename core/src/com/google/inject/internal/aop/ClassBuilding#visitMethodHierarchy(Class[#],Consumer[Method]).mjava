  /** Visit the method hierarchy for the host class. */
  private static void visitMethodHierarchy(Class<?> hostClass, Consumer<Method> visitor) {
    // this is an iterative form of the following recursive search:
    // 1. visit declared methods
    // 2. recursively visit superclass
    // 3. visit declared interfaces

    // stack of interface declarations, from host class (bottom) to superclass (top)
    Deque<Class<?>[]> interfaceStack = new ArrayDeque<>();

    // only try to match package-private methods if the class-definer has package-access
    String hostPackage = hasPackageAccess() ? packageName(hostClass.getName()) : null;

    for (Class<?> clazz = hostClass;
        clazz != Object.class && clazz != null;
        clazz = clazz.getSuperclass()) {

      // optionally visit package-private methods matching the same package as the host
      boolean samePackage = hostPackage != null && hostPackage.equals(packageName(clazz.getName()));

      visitMembers(clazz.getDeclaredMethods(), samePackage, visitor);
      pushInterfaces(interfaceStack, clazz.getInterfaces());
    }

    for (Method method : OVERRIDABLE_OBJECT_METHODS) {
      visitor.accept(method);
    }

    // work our way back down the class hierarchy, merging and flattening interfaces into a list
    List<Class<?>> interfaces = new ArrayList<>();
    while (!interfaceStack.isEmpty()) {
      for (Class<?> intf : interfaceStack.pop()) {
        if (mergeInterface(interfaces, intf)) {
          pushInterfaces(interfaceStack, intf.getInterfaces());
        }
      }
    }

    // finally visit the methods declared in the flattened interface hierarchy
    for (Class<?> intf : interfaces) {
      visitMembers(intf.getDeclaredMethods(), false, visitor);
    }
  }

