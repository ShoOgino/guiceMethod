    FastClassProviderMethod(Key<T> key,
        Method method,
        Object instance,
        ImmutableSet<Dependency<?>> dependencies,
        List<Provider<?>> parameterProviders,
        Class<? extends Annotation> scopeAnnotation) {
      super(key, method, instance, dependencies, parameterProviders, scopeAnnotation);
      // We need to generate a FastClass for the method's class, not the object's class.
      this.fastClass =
          BytecodeGen.newFastClass(method.getDeclaringClass(), Visibility.forMember(method));
      // Use the Signature overload of getIndex because it properly uses return types to identify
      // particular methods.  This is normally irrelevant, except in the case of covariant overrides
      // which java implements with a compiler generated bridge method to implement the override.
      this.methodIndex = fastClass.getIndex(
          new net.sf.cglib.core.Signature(
              method.getName(), org.objectweb.asm.Type.getMethodDescriptor(method)));
      Preconditions.checkArgument(this.methodIndex >= 0, 
          "Could not find method %s in fast class for class %s", 
          method, 
          method.getDeclaringClass());
    }

