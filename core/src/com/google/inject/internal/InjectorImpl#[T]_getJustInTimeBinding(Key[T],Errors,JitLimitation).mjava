  /**
   * Returns a just-in-time binding for {@code key}, creating it if necessary.
   *
   * @throws ErrorsException if the binding could not be created.
   */
  private <T> BindingImpl<T> getJustInTimeBinding(Key<T> key, Errors errors, JitLimitation jitType)
      throws ErrorsException {


    boolean jitOverride = isProvider(key) || isTypeLiteral(key) || isMembersInjector(key);
    if(options.jitDisabled && jitType == JitLimitation.NO_JIT && !jitOverride) {
      throw errors.jitDisabled(key).toException();
    }
    
    synchronized (state.lock()) {
      // first try to find a JIT binding that we've already created
      for (InjectorImpl injector = this; injector != null; injector = injector.parent) {
        @SuppressWarnings("unchecked") // we only store bindings that match their key
        BindingImpl<T> binding = (BindingImpl<T>) injector.jitBindings.get(key);

        if (binding != null) {
          return binding;
        }
      }
      
      if(options.jitDisabled && jitType != JitLimitation.NEW_OR_EXISTING_JIT && !jitOverride) {
        throw errors.jitDisabled(key).toException();
      } else {
        return createJustInTimeBindingRecursive(key, errors);
      }
    }
  }

