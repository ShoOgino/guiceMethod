    private static <T> ErrorsException newDuplicateValuesException(
        List<Binding<T>> bindings,
        LinkedHashSet<T> results,
        Binding<T> newBinding,
        T newValue,
        Errors errors) {
      // Find the duplicate binding
      // To do this we take advantage of the fact that results has the same order as bindings,
      // so that once we find a matching value in the result set, we know the binding
      // for it will have the same index.
      Iterator<T> itr = results.iterator();
      Binding<T> duplicateBinding = null;
      T oldValue = null;
      for (int i = 0; itr.hasNext(); i++) {
        T current = itr.next();
        if (current.equals(newValue)) {
          oldValue = current;
          duplicateBinding = bindings.get(i);
          break;
        }
      }
      String oldString = oldValue.toString();
      String newString = newValue.toString();
      if (Objects.equal(oldString, newString)) {
        // When the value strings match, just show the source of the bindings
        errors.addMessage(
            "Set injection failed due to duplicated element \"%s\""
                + "\n    Bound at %s\n    Bound at %s",
            newValue, duplicateBinding.getSource(), newBinding.getSource());
      } else {
        // When the value strings don't match, include them both as they may be useful for debugging
        errors.addMessage(
            "Set injection failed due to multiple elements comparing equal:"
                + "\n    \"%s\"\n        bound at %s"
                + "\n    \"%s\"\n        bound at %s",
            oldValue, duplicateBinding.getSource(), newValue, newBinding.getSource());
      }
      return errors.toException();
    }

