  @Override
  public T get(Errors errors, InternalContext context, Dependency dependency, boolean linked)
      throws ErrorsException {
    BindingImpl<? extends Provider<T>> localProviderBinding = providerBinding;
    if (localProviderBinding == null) {
      throw new IllegalStateException("not initialized");
    }
    Key<? extends Provider<T>> localProviderKey = providerKey;
    context.pushState(localProviderKey, localProviderBinding.getSource());
    try {
      errors = errors.withSource(localProviderKey);
      Provider<? extends T> provider = localProviderBinding.getInternalFactory().get(
          errors, context, dependency, true);
      return circularGet(provider, errors, context, dependency, provisionCallback);
    } finally {
      context.popState();
    }
  }

