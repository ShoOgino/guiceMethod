  protected T circularGet(Provider<? extends T> provider, Errors errors,
      InternalContext context, Dependency<?> dependency, boolean linked)
      throws ErrorsException {    
    Class<?> expectedType = dependency.getKey().getTypeLiteral().getRawType();
    
    // Use the Key we are providing for as a unique key to locate the context.
    // We cannot use dependency.getKey() because that is the Key of the type
    // we are trying to fulfill (which may be different among different
    // calls to us).  We also cannot use 'this', because the factory can
    // be recreated different times during @ProvidedBy creations.
    ConstructionContext<T> constructionContext = context.getConstructionContext(key);
    
    // We have a circular reference between constructors. Return a proxy.
    if (constructionContext.isConstructing()) {
      if (!allowProxy) {
        throw errors.circularProxiesDisabled(expectedType).toException();
      } else {
        // TODO: if we can't proxy this object, can we proxy the other object?
        @SuppressWarnings("unchecked")
        T proxyType = (T) constructionContext.createProxy(errors, expectedType);
        return proxyType;
      }
    }
    // First time through...
    constructionContext.startConstruction();
    try {
      T t = errors.checkForNull(provider.get(), source, dependency);
      constructionContext.setProxyDelegates(t);
      return t;
    } finally {
      constructionContext.finishConstruction();
    }
  }

