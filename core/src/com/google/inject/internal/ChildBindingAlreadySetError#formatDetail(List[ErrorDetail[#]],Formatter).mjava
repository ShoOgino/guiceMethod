  @Override
  public void formatDetail(List<ErrorDetail<?>> mergeableErrors, Formatter formatter) {
    if (existingSoruces.isEmpty()) {
      formatter.format("%n%s%n", Messages.bold("Bound by a just-in-time binding"));
    } else {
      formatter.format("%n%s%n", Messages.bold("Bound at:"));
      int index = 1;
      for (Object source : existingSoruces) {
        formatter.format("%-2s: ", index++);
        new SourceFormatter(source, formatter, /* omitPreposition= */ true).format();
      }
    }

    List<List<Object>> sourcesList = new ArrayList<>();
    sourcesList.add(getSources());
    mergeableErrors.forEach(error -> sourcesList.add(error.getSources()));

    List<List<Object>> filteredSources =
        sourcesList.stream()
            .map(this::trimSource)
            .filter(list -> !list.isEmpty())
            .collect(Collectors.toList());
    if (!filteredSources.isEmpty()) {
      formatter.format("%n%s%n", Messages.bold("Requested by:"));
      for (int i = 0; i < sourcesList.size(); i++) {
        ErrorFormatter.formatSources(i + 1, sourcesList.get(i), formatter);
      }
    }

    // TODO(b/151482394): Detect if the key was bound in any PrivateModule and suggest exposing the
    // key in those cases.
  }

