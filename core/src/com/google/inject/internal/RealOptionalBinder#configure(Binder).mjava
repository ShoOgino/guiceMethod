  @Override
  public void configure(Binder binder) {
    bindingSelection.checkNotInitialized();
    Key<T> key = bindingSelection.getDirectKey();
    TypeLiteral<T> typeLiteral = key.getTypeLiteral();
    // Every OptionalBinder gets the following types bound
    // * {cgcb,ju}.Optional<Provider<T>>
    // * {cgcb,ju}.Optional<javax.inject.Provider<T>>
    // * {cgcb,ju}.Optional<T>
    // If setDefault() or setBinding() is called then also
    // * T is bound

    // cgcb.Optional<Provider<T>>
    InternalProviderInstanceBindingImpl.Factory<Optional<Provider<T>>> optionalProviderFactory =
        new RealOptionalProviderProvider<>(bindingSelection);
    binder.bind(key.ofType(optionalOfProvider(typeLiteral))).toProvider(optionalProviderFactory);
    // ju.Optional<Provider<T>>
    InternalProviderInstanceBindingImpl.Factory<java.util.Optional<Provider<T>>>
        javaOptionalProviderFactory = new JavaOptionalProviderProvider<>(bindingSelection);
    binder
        .bind(key.ofType(javaOptionalOfProvider(typeLiteral)))
        .toProvider(javaOptionalProviderFactory);

    // Provider is assignable to javax.inject.Provider and the provider that the factory contains
    // cannot be modified so we can use some rawtypes hackery to share the same implementation.

    // cgcb.Optional<ji.Provider<T>>
    @SuppressWarnings("unchecked")
    InternalProviderInstanceBindingImpl.Factory<Optional<javax.inject.Provider<T>>>
        optionalJavaxProviderFactory =
            (InternalProviderInstanceBindingImpl.Factory) optionalProviderFactory;
    binder
        .bind(key.ofType(optionalOfJavaxProvider(typeLiteral)))
        .toProvider(optionalJavaxProviderFactory);
    // ju.Optional<ji.Provider<T>>
    @SuppressWarnings("unchecked")
    InternalProviderInstanceBindingImpl.Factory<java.util.Optional<javax.inject.Provider<T>>>
        javaOptionalJavaxProviderFactory =
            (InternalProviderInstanceBindingImpl.Factory) javaOptionalProviderFactory;
    binder
        .bind(key.ofType(javaOptionalOfJavaxProvider(typeLiteral)))
        .toProvider(javaOptionalJavaxProviderFactory);

    // cgcb.Optional<T>
    Key<Optional<T>> optionalKey = key.ofType(optionalOf(typeLiteral));
    binder
        .bind(optionalKey)
        .toProvider(new RealOptionalKeyProvider<>(bindingSelection, optionalKey));
    // ju.Optional<T>
    Key<java.util.Optional<T>> javaOptionalKey = key.ofType(javaOptionalOf(typeLiteral));
    binder
        .bind(javaOptionalKey)
        .toProvider(new JavaOptionalProvider<>(bindingSelection, javaOptionalKey));
  }

