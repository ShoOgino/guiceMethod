  ProxyFactory(InjectionPoint injectionPoint, Iterable<MethodAspect> methodAspects)
      throws ErrorsException {
    this.injectionPoint = injectionPoint;

    Class<?> hostClass = injectionPoint.getMember().getDeclaringClass();

    // Find applicable aspects. Bow out if none are applicable to this class.
    List<MethodAspect> applicableAspects = Lists.newArrayList();
    for (MethodAspect methodAspect : methodAspects) {
      if (methodAspect.matches(hostClass)) {
        applicableAspects.add(methodAspect);
      }
    }

    if (applicableAspects.isEmpty()) {
      enhancer = null;
      interceptors = ImmutableMap.of();
      callbacks = null;
      return;
    }

    BytecodeGen.EnhancerBuilder enhancerBuilder = BytecodeGen.enhancerBuilder(hostClass);

    Method[] methods = enhancerBuilder.getEnhanceableMethods();
    int numMethods = methods.length;

    Multimap<Method, MethodInterceptor> matchedInterceptors = ArrayListMultimap.create();
    BitSet matchedMethodIndices = new BitSet();

    // Iterate over aspects and add interceptors for the methods they apply to
    for (MethodAspect methodAspect : applicableAspects) {
      for (int methodIndex = 0; methodIndex < numMethods; methodIndex++) {
        Method method = methods[methodIndex];
        if (methodAspect.matches(method)) {
          if (method.isSynthetic()) {
            logger.log(
                Level.WARNING,
                "Method [{0}] is synthetic and is being intercepted by {1}."
                    + " This could indicate a bug.  The method may be intercepted twice,"
                    + " or may not be intercepted at all.",
                new Object[] {method, methodAspect.interceptors()});
          }

          matchedInterceptors.putAll(method, methodAspect.interceptors());
          matchedMethodIndices.set(methodIndex);
        }
      }
    }

    if (matchedMethodIndices.isEmpty()) {
      enhancer = null;
      interceptors = ImmutableMap.of();
      callbacks = null;
      return;
    }

    try {
      enhancer = enhancerBuilder.buildEnhancer(matchedMethodIndices);
    } catch (Throwable e) {
      throw new Errors().errorEnhancingClass(hostClass, e).toException();
    }

    callbacks = new InvocationHandler[matchedMethodIndices.cardinality()];

    ImmutableMap.Builder<Method, List<MethodInterceptor>> interceptorsMapBuilder =
        ImmutableMap.builder();

    int callbackIndex = 0;
    for (int methodIndex = matchedMethodIndices.nextSetBit(0);
        methodIndex >= 0;
        methodIndex = matchedMethodIndices.nextSetBit(methodIndex + 1)) {

      Method method = methods[methodIndex];
      List<MethodInterceptor> deDuplicated =
          ImmutableSet.copyOf(matchedInterceptors.get(method)).asList();
      interceptorsMapBuilder.put(method, deDuplicated);

      BiFunction<Object, Object[], Object> superInvoker = BytecodeGen.superMethod(enhancer, method);
      callbacks[callbackIndex++] = new InterceptorStackCallback(method, deDuplicated, superInvoker);
    }

    interceptors = interceptorsMapBuilder.build();
  }

