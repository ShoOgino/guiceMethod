  /**
   * Checks if the member is accessibly via a FastClass proxy.
   *
   * <p>FastClass works by generating a class (not a subclass) in the same package as the member
   * which allows it to access package private and protectected members as long as it can generate
   * the type into the same classloader.  The main time when this is not the case is for JDK types.
   * JDK types are loaded by the 'bootstrap classloader' which is not acccessible to user code and
   * cglib cannot generate classes in it.  This is mostly a non-issue since Guice doesn't typically
   * inject JDK classes, but some do have package private nullary constructors (e.g.
   * {@code java.net.InetAddress}) and Guice may attempt to generate JIT bindings for them if
   * {@code Binder.requireAtInjectOnConstructors()} is not set.
   */
  public static boolean isFastClassable(Member member) {
    // This is the same rule that FastClass itself uses to decide whether or not to index a method.
    // See FastClassEmitter
    return new net.sf.cglib.core.VisibilityPredicate(member.getDeclaringClass(), false)
        .evaluate(member);
  }

