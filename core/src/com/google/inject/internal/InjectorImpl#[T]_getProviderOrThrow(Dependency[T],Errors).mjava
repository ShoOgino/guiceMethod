  <T> Provider<T> getProviderOrThrow(final Dependency<T> dependency, Errors errors)
      throws ErrorsException {
    Key<T> key = dependency.getKey();
    BindingImpl<? extends T> binding = getBindingOrThrow(key, errors, JitLimitation.NO_JIT);
    final InternalFactory<? extends T> internalFactory = binding.getInternalFactory();
    final Object source = binding.getSource();

    return new Provider<T>() {
      @Override
      public T get() {
        Errors errors = new Errors(dependency);
        InternalContext currentContext = enterContext();
        Dependency previous = currentContext.pushDependency(dependency, source);
        try {
          T t = internalFactory.get(errors, currentContext, dependency, false);
          errors.throwIfNewErrors(0);
          return t;
        } catch (ErrorsException e) {
          throw new ProvisionException(errors.merge(e.getErrors()).getMessages());
        } finally {
          currentContext.popStateAndSetDependency(previous);
          currentContext.close();
        }
      }

      @Override
      public String toString() {
        return internalFactory.toString();
      }
    };
  }

