  /** Scopes an internal factory. */
  static <T> InternalFactory<? extends T> scope(Key<T> key, InjectorImpl injector,
      InternalFactory<? extends T> creator, Object source, Scoping scoping) {

    if (scoping.isNoScope()) {
      return creator;
    }

    Scope scope = scoping.getScopeInstance();

    try {
      SingletonScope.singletonCreationPerRootInjectorLock.set(injector.state.singletonCreationLock());
      Provider<T> scoped
          = scope.scope(key, new ProviderToInternalFactoryAdapter<T>(injector, creator));
      return new InternalFactoryToProviderAdapter<T>(scoped, source);
    } finally {
      SingletonScope.singletonCreationPerRootInjectorLock.set(null);
    }
  }

