  public Object invoke(Object proxy, Method method, Object[] args)
      throws Throwable {
    try {
      // checking volatile field for synchronization
      Preconditions.checkState(initialized,
          "This is a proxy used to support"
              + " circular references. The object we're"
              + " proxying is not constructed yet. Please wait until after"
              + " injection has completed to use this object.");
      Preconditions.checkNotNull(delegate,
          "This is a proxy used to support"
              + " circular references. The object we're "
              + " proxying is initialized to null."
              + " No methods can be called.");

      // TODO: method.setAccessible(true); ?
      // this would fix visibility errors when we proxy a
      // non-public interface.
      return method.invoke(delegate, args);
    } catch (IllegalAccessException e) {
      throw new RuntimeException(e);
    } catch (IllegalArgumentException e) {
      throw new RuntimeException(e);
    } catch (InvocationTargetException e) {
      throw e.getTargetException();
    }
  }

