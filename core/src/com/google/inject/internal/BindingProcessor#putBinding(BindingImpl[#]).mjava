  private void putBinding(BindingImpl<?> binding) {
    Key<?> key = binding.getKey();

    Class<?> rawType = key.getTypeLiteral().getRawType();
    if (FORBIDDEN_TYPES.contains(rawType)) {
      errors.cannotBindToGuiceType(rawType.getSimpleName());
      return;
    }

    BindingImpl<?> original = injector.state.getExplicitBinding(key);
    if (original != null) {
      try {
        if(!isOkayDuplicate(original, binding, injector.state)) {
          errors.bindingAlreadySet(key, original.getSource());
          return;
        }
      } catch(Throwable t) {
        errors.errorCheckingDuplicateBinding(key, original.getSource(), t);
        return;
      }
    }

    // prevent the parent from creating a JIT binding for this key
    injector.state.parent().blacklist(key, binding.getSource());
    injector.state.putBinding(key, binding);
  }

