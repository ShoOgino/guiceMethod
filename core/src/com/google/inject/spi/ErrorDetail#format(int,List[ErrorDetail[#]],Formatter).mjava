  /**
   * Formats this error along with other errors that are mergeable with this error.
   *
   * <p>{@code mergeableErrors} is a list that contains all other errors that are reported in the
   * same exception that are considered to be mergable with this error base on result of calling
   * {@link #isMergeable}. The list will be empty if non of the other errors are mergable with this
   * error.
   *
   * <p>Formatted error has the following structure:
   *
   * <ul>
   *   <li>Summary of the error
   *   <li>Details about the error such as the source of the error
   *   <li>Hints for fixing the error if available
   *   <li>Link to the documentation on this error in greater detail
   *
   * @param index index for this error
   * @param mergeableErrors list of errors that are mergeable with this error
   * @param formatter for printing the error message
   */
  public final void format(int index, List<ErrorDetail<?>> mergeableErrors, Formatter formatter) {
    if (InternalFlags.enableExperimentalErrorMessages()) {
      formatter.format("%s) [%s]: %s%n%n", index, Messages.redBold(errorIdentifier), getMessage());
      formatDetail(mergeableErrors, formatter);
      formatter.format("%n");
      // TODO(b/151482394): Output potiential fixes for the error
      Optional<String> learnMoreLink = getLearnMoreLink();
      if (learnMoreLink.isPresent()) {
        formatter.format("%s%n", Messages.bold("Learn more:"));
        formatter.format("  %s%n", Messages.underline(learnMoreLink.get()));
      }
    } else {
      // TODO(b/151482394): Remove this once the new error messages are enabled.
      formatter.format("%s) %s%n", index, getMessage());
      formatDetail(mergeableErrors, formatter);
      return;
    }
  }

