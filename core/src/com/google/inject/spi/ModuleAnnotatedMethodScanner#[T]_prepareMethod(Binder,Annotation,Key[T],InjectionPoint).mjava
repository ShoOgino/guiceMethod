  /**
   * Prepares a method for binding. This {@code key} parameter is the key discovered from looking at
   * the binding annotation and return value of the method. Implementations can modify the key to
   * instead bind to another key. For example, Multibinder may want to change
   * {@code @ProvidesIntoSet String provideFoo()} to bind into a unique Key within the multibinder
   * instead of binding {@code String}.
   *
   * <p>The injection point and annotation are provided in case the implementation wants to set the
   * key based on the property of the annotation or if any additional preparation is needed for any
   * of the dependencies. The annotation is guaranteed to be an instance of one the classes returned
   * by {@link #annotationClasses}.
   *
   * <p>Returning null will cause Guice to skip this method, so that it is not bound to any key.
   *
   * <p>If {@code injectionPoint} represents an {@code abstract} method, {@code null} must be
   * returned from this method. This scanner can use {@code binder} to bind alternative bindings in
   * place of the abstract method.
   */
  public abstract <T> Key<T> prepareMethod(
      Binder binder, Annotation annotation, Key<T> key, InjectionPoint injectionPoint);

